#!/usr/bin/env perl
#
# InspIRCd -- Internet Relay Chat Daemon
#
#   Copyright (C) 2020 Nicole Kleinhoff <ilbelkyr@shalture.org>
#   Copyright (C) 2020 Daniel Vassdal <shutter@canternet.org>
#   Copyright (C) 2019 Matt Schatz <genius3000@g3k.solutions>
#   Copyright (C) 2013-2021 Sadie Powell <sadie@witchery.services>
#   Copyright (C) 2012, 2019 Robby <robby@chatbelgie.be>
#   Copyright (C) 2012 ChrisTX <xpipe@hotmail.de>
#   Copyright (C) 2010 Daniel De Graaf <danieldg@inspircd.org>
#   Copyright (C) 2008 Thomas Stagner <aquanight@inspircd.org>
#   Copyright (C) 2008 Robin Burchell <robin+git@viroteck.net>
#   Copyright (C) 2007 Dennis Friis <peavey@inspircd.org>
#   Copyright (C) 2006-2008 Craig Edwards <brain@inspircd.org>
#
# This file is part of InspIRCd.  InspIRCd is free software: you can
# redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


use v5.10.0;
use strict;
use warnings FATAL => qw(all);

use Cwd                   qw(getcwd);
use File::Basename        qw(basename);
use File::Copy            ();
use File::Spec::Functions qw(abs2rel catfile catdir rel2abs);
use FindBin               qw($RealDir);
use Getopt::Long          qw(GetOptions);
use POSIX                 qw(getgid getuid);

use lib $RealDir;
use make::common;
use make::configure;
use make::console;
use make::directive;

my ($opt_binary_dir,
    $opt_config_dir,
    $opt_data_dir,
    $opt_development,
    $opt_disable_auto_extras,
    $opt_disable_interactive,
    $opt_distribution_label,
    $opt_example_dir,
    $opt_gid,
    $opt_log_dir,
    $opt_manual_dir,
    $opt_module_dir,
    $opt_portable,
    $opt_prefix,
    $opt_runtime_dir,
    $opt_script_dir,
    $opt_socketengine,
    $opt_system,
    $opt_uid);

sub list_extras ();

sub enable_extras (@);

sub disable_extras (@);

my @opt_enableextras;
my @opt_disableextras;

exit 1 unless GetOptions(
	'clean'  => \&cmd_clean,
	'help'	 => \&cmd_help,
	'update' => \&cmd_update,

	'binary-dir=s'         => \$opt_binary_dir,
	'config-dir=s'         => \$opt_config_dir,
	'data-dir=s'           => \$opt_data_dir,
	'development'          => \$opt_development,
	'disable-auto-extras'  => \$opt_disable_auto_extras,
	'disable-interactive'  => \$opt_disable_interactive,
	'distribution-label=s' => \$opt_distribution_label,
	'example-dir=s'        => \$opt_example_dir,
	'gid=s'                => \$opt_gid,
	'log-dir=s'            => \$opt_log_dir,
	'manual-dir=s'         => \$opt_manual_dir,
	'module-dir=s'         => \$opt_module_dir,
	'portable'             => \$opt_portable,
	'prefix=s'             => \$opt_prefix,
	'runtime-dir=s'        => \$opt_runtime_dir,
	'script-dir=s'         => \$opt_script_dir,
	'socketengine=s'       => \$opt_socketengine,
	'system'               => \$opt_system,
	'uid=s'                => \$opt_uid,

	'disable-extras=s@' => \@opt_disableextras,
	'enable-extras=s@'  => \@opt_enableextras,
	'list-extras'       => sub { list_extras; exit 0; },
);

if (scalar(@opt_enableextras) + scalar(@opt_disableextras) > 0) {
	@opt_enableextras = grep { /\S/ } split /[, ]+/, join(',', @opt_enableextras);
	@opt_disableextras = grep { /\S/ } split /[, ]+/, join(',', @opt_disableextras);
	enable_extras(@opt_enableextras);
	disable_extras(@opt_disableextras);
	list_extras;
	print "Remember: YOU are responsible for making sure any libraries needed have been installed!\n";
	exit 0;
}

our $interactive = !(
	!-t STDIN ||
	!-t STDOUT ||
	defined $opt_binary_dir ||
	defined $opt_config_dir ||
	defined $opt_data_dir ||
	defined $opt_development ||
	defined $opt_disable_auto_extras ||
	defined $opt_disable_interactive ||
	defined $opt_distribution_label ||
	defined $opt_example_dir ||
	defined $opt_gid ||
	defined $opt_log_dir ||
	defined $opt_manual_dir ||
	defined $opt_module_dir ||
	defined $opt_portable ||
	defined $opt_prefix ||
	defined $opt_runtime_dir ||
	defined $opt_script_dir ||
	defined $opt_socketengine ||
	defined $opt_system ||
	defined $opt_uid
);

my %version = get_version $opt_distribution_label;
say console_format "<|BOLD Configuring InspIRCd $version{FULL} on $^O.|>";

my %config;
if ($interactive) {
	%config = read_config_file(CONFIGURE_CACHE_FILE);
	run_test abs2rel(CONFIGURE_CACHE_FILE, $RealDir), %config;
	if (!defined $config{VERSION}) {
		$config{VERSION} = CONFIGURE_CACHE_VERSION;
	} elsif ($config{VERSION} != CONFIGURE_CACHE_VERSION) {
		print_warning "ignoring contents of ${\CONFIGURE_CACHE_FILE} as it was generated by an incompatible version of $0!";
		%config = ('VERSION', CONFIGURE_CACHE_VERSION);
	}
}

$config{CXX} = find_compiler($config{CXX} // $ENV{CXX});
unless ($config{CXX}) {
	say 'A suitable C++ compiler could not be detected on your system!';
	unless ($interactive) {
		say 'Set the CXX environment variable to the path to a C++ compiler binary if this is incorrect.';
		exit 1;
	}
	until ($config{CXX}) {
		my $compiler_path = prompt_string 1, 'Please enter the path to a C++ compiler binary:', 'c++';
		$config{CXX} = find_compiler $compiler_path;
	}
}
my %compiler = get_compiler_info($config{CXX});

$config{HAS_ARC4RANDOM_BUF} = run_test 'arc4random_buf()', test_file($config{CXX}, 'arc4random_buf.cpp');
$config{HAS_CLOCK_GETTIME} = run_test 'clock_gettime()', test_file($config{CXX}, 'clock_gettime.cpp', $^O eq 'darwin' ? undef : '-lrt');
$config{HAS_EVENTFD} = run_test 'eventfd()', test_file($config{CXX}, 'eventfd.cpp');

my @socketengines;
push @socketengines, 'epoll'  if run_test 'epoll', test_header $config{CXX}, 'sys/epoll.h';
push @socketengines, 'kqueue' if run_test 'kqueue', test_file $config{CXX}, 'kqueue.cpp';
push @socketengines, 'poll'   if run_test 'poll', test_header $config{CXX}, 'poll.h';
push @socketengines, 'select';

if (defined $opt_socketengine) {
	unless (grep { $_ eq $opt_socketengine } @socketengines) {
		my $reason = -f "src/socketengines/socketengine_$opt_socketengine.cpp" ? 'is not available on this platform' : 'does not exist';
		print_error "The socket engine you requested ($opt_socketengine) $reason!",
			'Available socket engines are:',
			map { "  * $_" } @socketengines;
	}
}
$config{SOCKETENGINE} = $opt_socketengine // $socketengines[0];

if (defined $opt_portable) {
	print_error '--portable and --system can not be used together!' if defined $opt_system;
	$config{DESTDIR}     = catfile $RealDir, 'run', '';
	$config{BASE_DIR}    = $opt_prefix      // '';
	$config{BINARY_DIR}  = $opt_binary_dir  // 'bin';
	$config{CONFIG_DIR}  = $opt_config_dir  // 'conf';
	$config{DATA_DIR}    = $opt_data_dir    // 'data';
	$config{EXAMPLE_DIR} = $opt_example_dir // catdir $config{CONFIG_DIR}, 'examples';
	$config{LOG_DIR}     = $opt_log_dir     // 'logs';
	$config{MANUAL_DIR}  = $opt_manual_dir  // 'manuals';
	$config{MODULE_DIR}  = $opt_module_dir  // 'modules';
	$config{RUNTIME_DIR} = $opt_runtime_dir // $config{DATA_DIR};
	$config{SCRIPT_DIR}  = $opt_script_dir  // $config{BASE_DIR};
} elsif (defined $opt_system) {
	$config{BASE_DIR}    = $opt_prefix      // '/';
	$config{BINARY_DIR}  = $opt_binary_dir  // catdir $config{BASE_DIR}, 'usr/sbin';
	$config{CONFIG_DIR}  = $opt_config_dir  // catdir $config{BASE_DIR}, 'etc/inspircd';
	$config{DATA_DIR}    = $opt_data_dir    // catdir $config{BASE_DIR}, 'var/lib/inspircd';
	$config{EXAMPLE_DIR} = $opt_example_dir // catdir $config{BASE_DIR}, 'usr/share/doc/inspircd';
	$config{LOG_DIR}     = $opt_log_dir     // catdir $config{BASE_DIR}, 'var/log/inspircd';
	$config{MANUAL_DIR}  = $opt_manual_dir  // catdir $config{BASE_DIR}, 'usr/share/man/man1';
	$config{MODULE_DIR}  = $opt_module_dir  // catdir $config{BASE_DIR}, 'usr/lib/inspircd';
	$config{RUNTIME_DIR} = $opt_runtime_dir // catdir $config{BASE_DIR}, 'var/run/inspircd';
	$config{SCRIPT_DIR}  = $opt_script_dir  // catdir $config{BASE_DIR}, 'usr/share/inspircd';
} else {
	$config{BASE_DIR}    = rel2abs $opt_prefix // $config{BASE_DIR}    // catdir $RealDir,            'run';
	$config{BINARY_DIR}  = $opt_binary_dir     // $config{BINARY_DIR}  // catdir $config{BASE_DIR},   'bin';
	$config{CONFIG_DIR}  = $opt_config_dir     // $config{CONFIG_DIR}  // catdir $config{BASE_DIR},   'conf';
	$config{DATA_DIR}    = $opt_data_dir       // $config{DATA_DIR}    // catdir $config{BASE_DIR},   'data';
	$config{EXAMPLE_DIR} = $opt_example_dir    // $config{EXAMPLE_DIR} // catdir $config{CONFIG_DIR}, 'examples';
	$config{LOG_DIR}     = $opt_log_dir        // $config{LOG_DIR}     // catdir $config{BASE_DIR},   'logs';
	$config{MANUAL_DIR}  = $opt_manual_dir     // $config{MANUAL_DIR}  // catdir $config{BASE_DIR},   'manuals';
	$config{MODULE_DIR}  = $opt_module_dir     // $config{MODULE_DIR}  // catdir $config{BASE_DIR},   'modules';
	$config{RUNTIME_DIR} = $opt_runtime_dir    // $config{RUNTIME_DIR} // $config{DATA_DIR};
	$config{SCRIPT_DIR}  = $opt_script_dir     // $config{SCRIPT_DIR}  // $config{BASE_DIR};
}

# Parse --gid=123 or --gid=foo and extract the group id.
my @group;
if (defined $opt_gid) {
	@group = $opt_gid =~ /^\d+$/ ? getgrgid($opt_gid) : getgrnam($opt_gid);
	print_error "there is no '$opt_gid' group on this system!" unless @group;
} else {
	@group = $opt_system ? getgrnam('irc') : getgrgid($config{GID} // getgid());
	print_error "you need to specify a group to run as using '--gid [id|name]'!" unless @group;
	unless ($group[2]) {
		print_warning <<"EOW";
You are building as the privileged $group[0] group and have not specified
an unprivileged group to run InspIRCd as.

This is almost never what you should do. You should probably either create a new
unprivileged user/group to build and run as or pass the '--gid [id|name]' flag
to specify an unprivileged group to run as.
EOW
		if (!prompt_bool $interactive, "Are you sure you want to build as the $group[0] group?", 0) {
			# PACKAGERS: You do not need to delete this check. Use `--gid $(id -g)` or `--gid 0` instead.
			say STDERR "If you are sure you want to build as the $group[0] group pass the --gid $group[2] flag." unless $interactive;
			exit 1;
		}
	}
}
$config{GROUP} = $group[0];
$config{GID}   = $group[2];

# Parse --uid=123 or --uid=foo and extract the user id.
my @user;
if (defined $opt_uid) {
	@user = $opt_uid =~ /^\d+$/ ? getpwuid($opt_uid) : getpwnam($opt_uid);
	print_error "there is no '$opt_uid' user on this system!" unless @user;
} else {
	@user = $opt_system ? getpwnam('irc') : getpwuid($config{UID} // getuid());
	print_error "you need to specify a user to run as using '--uid [id|name]'!" unless @user;
	unless ($user[2]) {
		print_warning <<"EOW";
You are building as the privileged $user[0] user and have not specified
an unprivileged user to run InspIRCd as.

This is almost never what you should do. You should probably either create a new
unprivileged user/group to build and run as or pass the '--uid [id|name]' flag
to specify an unprivileged user to run as.
EOW
		if (!prompt_bool $interactive, "Are you sure you want to build as the $user[0] user?", 0) {
			# PACKAGERS: You do not need to delete this check. Use `--uid $(id -u)` or `--uid 0` instead.
			say STDERR "If you are sure you want to build as the $user[0] user pass the --uid $user[2] flag." unless $interactive;
			exit 1;
		}
	}
}
$config{USER} = $user[0];
$config{UID}  = $user[2];

# Warn the user about clock drifting when running on OpenVZ.
if (-e '/proc/user_beancounters' || -e '/proc/vz/vzaquota') {
	print_warning <<'EOW';
You are building InspIRCd inside of an OpenVZ container. If you
plan to use InspIRCd in this container then you should make sure that NTP is
configured on the Hardware Node. Failure to do so may result in clock drifting!
EOW
}

# Warn the user about OpenBSD shipping incredibly broken compilers/linkers.
if ($^O eq 'openbsd') {
	print_warning <<'EOW';
You are building InspIRCd on OpenBSD. The C++ compilers and linkers
that OpenBSD ship are incredibly broken. You may have strange linker errors
and crashes. Please consider using a different OS like FreeBSD/NetBSD instead.
EOW
}

# Warn about Perl versions that will not be supported in the future.
if ($^V lt 'v5.26.0') {
	print_warning <<"EOW";
You are building InspIRCd with Perl $^V. This is very old and will
not be supported by the next major version of InspIRCd. Please consider updating
to Perl v5.26 or newer.
EOW
}

# Warn about compiler versions that will not be supported in the future.
my %future_compilers = (
	AppleClang => version->parse('10.0'),
	Clang      => version->parse('5.0'),
	GCC        => version->parse('7.0'),
);
if (exists $future_compilers{$compiler{NAME}} && $compiler{VERSION} lt $future_compilers{$compiler{NAME}}) {
	print_warning <<"EOW";
You are building InspIRCd with $compiler{NAME} v$compiler{VERSION}. This is very old and
will not be supported by the next major version of InspIRCd. Please consider
updating to $compiler{NAME} v$future_compilers{$compiler{NAME}} or newer.
EOW
}

# Check that the user actually wants this version.
if (defined $version{REAL_LABEL}) {
	print_warning <<'EOW';
You are building a development version. This contains code which has
not been tested as heavily and may contain various faults which could seriously
affect the running of your server. It is recommended that you use a stable
version instead.

You can obtain the latest stable version from https://www.inspircd.org or by
running `<|GREEN git checkout $(git describe --abbrev=0 --tags insp3)|>` if you are
installing from Git.
EOW
	if (!prompt_bool $interactive, 'I understand this warning and want to continue anyway.', $opt_development // 0) {
		say STDERR 'If you understand this warning and still want to continue pass the --development flag.' unless $interactive;
		exit 1;
	}
}

# Configure directory settings.
my $question = <<"EOQ";
Currently, InspIRCd is configured with the following paths:

<|BOLD Binary:|> $config{BINARY_DIR}
<|BOLD Config:|> $config{CONFIG_DIR}
<|BOLD Data:|>   $config{DATA_DIR}
<|BOLD Log:|>    $config{LOG_DIR}
<|BOLD Manual:|> $config{MANUAL_DIR}
<|BOLD Module:|> $config{MODULE_DIR}
<|BOLD Script:|> $config{SCRIPT_DIR}

Do you want to change these settings?
EOQ
if (prompt_bool $interactive, $question, 0) {
	my $original_base_dir = $config{BASE_DIR};
	$config{BASE_DIR} = prompt_dir $interactive, 'In what directory do you wish to install the InspIRCd base?', $config{BASE_DIR};
	for my $key (qw(BINARY_DIR CONFIG_DIR DATA_DIR LOG_DIR MANUAL_DIR MODULE_DIR SCRIPT_DIR)) {
		$config{$key} =~ s/^\Q$original_base_dir\E/$config{BASE_DIR}/;
	}
	$config{BINARY_DIR} = prompt_dir $interactive, 'In what directory should the InspIRCd binary be placed?', $config{BINARY_DIR};
	$config{CONFIG_DIR} = prompt_dir $interactive, 'In what directory are configuration files to be stored?', $config{CONFIG_DIR};
	$config{DATA_DIR}   = prompt_dir $interactive, 'In what directory are variable data files to be stored?', $config{DATA_DIR};
	$config{LOG_DIR}    = prompt_dir $interactive, 'In what directory are log files to be stored?',           $config{LOG_DIR};
	$config{MANUAL_DIR} = prompt_dir $interactive, 'In what directory are manual pages to be placed?',        $config{MANUAL_DIR};
	$config{MODULE_DIR} = prompt_dir $interactive, 'In what directory are modules to be placed?',             $config{MODULE_DIR};
	$config{SCRIPT_DIR} = prompt_dir $interactive, 'In what directory are scripts to be placed?',             $config{SCRIPT_DIR};
	$config{EXAMPLE_DIR} = $config{CONFIG_DIR} . '/examples';
	$config{RUNTIME_DIR} = $config{DATA_DIR};
}

# Configure module settings.
$question = <<'EOQ';
Currently, InspIRCd is configured to automatically enable all available extra modules.

Would you like to enable extra modules manually?
EOQ
if (prompt_bool $interactive, $question, 0) {
	for my $extra (<$RealDir/src/modules/extra/m_*.cpp>) {
		my $module_name = module_shrink $extra;
		if (prompt_bool $interactive, "Would you like to enable the <|BOLD $module_name|> module?", 0) {
			enable_extras $module_name;
		}
	}
} elsif (!defined $opt_disable_auto_extras) {
	my %modules = (
		'm_argon2.cpp'          => 'pkg-config --exists libargon2',
		'm_geo_maxmind.cpp'     => 'pkg-config --exists libmaxminddb',
		'm_mysql.cpp'           => 'mysql_config --version',
		'm_pgsql.cpp'           => 'pg_config --version',
		'm_ldap.cpp'            => "echo '#include <ldap.h>' | $config{CXX} -E -",
		'm_regex_pcre.cpp'      => 'pcre-config --version',
		'm_regex_posix.cpp'     => undef,
		'm_regex_re2.cpp'       => 'pkg-config --exists re2',
		'm_regex_stdlib.cpp'    => "$config{CXX} -o /dev/null -std=c++11 $RealDir/make/test/compiler.cpp",
		'm_regex_tre.cpp'       => 'pkg-config --exists tre',
		'm_sqlite3.cpp'         => 'pkg-config --exists sqlite3',
		'm_ssl_gnutls.cpp'      => 'pkg-config --exists gnutls',
		'm_ssl_mbedtls.cpp'     => "echo '#include <mbedtls/version.h>' | $config{CXX} -E -",
		'm_ssl_openssl.cpp'     => 'pkg-config --exists openssl',
		'm_sslrehashsignal.cpp' => undef,
	);
	while (my ($module, $command) = each %modules) {
		unless (defined $command && system "$command 1>/dev/null 2>/dev/null") {
			enable_extras $module;
		}
	}
}

# Generate SSL certificates.
$question = <<EOQ;
Would you like to generate a self-signed SSL certificate now? This certificate
can be used for testing but <|BOLD should not|> be used on a production network.

Note: you can get a <|BOLD free|> CA-signed certificate from Let's Encrypt. See
https://letsencrypt.org/getting-started/ for more details.
EOQ

if (<$RealDir/src/modules/m_ssl_*.cpp>) {
	if (prompt_bool $interactive, $question, $interactive) {
		create_directory CONFIGURE_DIRECTORY, 0750 or print_error "unable to create ${\CONFIGURE_DIRECTORY}: $!";
		system './tools/genssl', 'auto', CONFIGURE_DIRECTORY;
	} else {
		my @pems = <${\CONFIGURE_DIRECTORY}/{cert,csr,dhparams,key}.pem>;
		$question = <<EOQ;
The following self-signed files were previously generated and will be installed
when you run Make. Do you want to delete them?

  * ${\join "\n  * ", @pems}
EOQ
		if (@pems && prompt_bool $interactive, $question, 0) {
			unlink @pems;
		}
	}
} elsif (!defined $opt_disable_auto_extras) {
	print_warning <<"EOM";
You are building without enabling any SSL modules. This is not
recommended as SSL greatly enhances the security and privacy of your IRC server
and in a future version will be <|BOLD required|> for linking servers.

Please read the following documentation pages on how to enable SSL support:

GnuTLS (recommended): https://docs.inspircd.org/3/modules/ssl_gnutls
mbedTLS:              https://docs.inspircd.org/3/modules/ssl_mbedtls
OpenSSL:              https://docs.inspircd.org/3/modules/ssl_openssl
EOM
}

# Cache the distribution label so that its not lost when --update is run.
$config{DISTRIBUTION} = $opt_distribution_label if $opt_distribution_label;

write_configure_cache %config;
parse_templates \%config, \%compiler, \%version;

print console_format <<"EOM";

Configuration is complete! You have chosen to build with the following settings:

<|GREEN Compiler:|>
  <|GREEN Binary:|>  $config{CXX}
  <|GREEN Name:|>    $compiler{NAME}
  <|GREEN Version:|> $compiler{VERSION}

<|GREEN Extra Modules:|>
EOM

for my $file (<$RealDir/src/modules/m_*>) {
	say "  * ${\module_shrink $file}" if -l $file;
}

my @makeargs;
push @makeargs, "-C${\abs2rel $RealDir}" unless getcwd eq $RealDir;
push @makeargs, "-j${\(get_cpu_count() + 1)}";

print console_format <<"EOM";

<|GREEN Paths:|>
  <|GREEN Binary:|>  $config{BINARY_DIR}
  <|GREEN Config:|>  $config{CONFIG_DIR}
  <|GREEN Data:|>    $config{DATA_DIR}
  <|GREEN Example:|> $config{EXAMPLE_DIR}
  <|GREEN Log:|>     $config{LOG_DIR}
  <|GREEN Manual:|>  $config{MANUAL_DIR}
  <|GREEN Module:|>  $config{MODULE_DIR}
  <|GREEN Runtime:|> $config{RUNTIME_DIR}
  <|GREEN Script:|>  $config{SCRIPT_DIR}

<|GREEN Execution Group:|> $config{GROUP} ($config{GID})
<|GREEN Execution User:|>  $config{USER} ($config{UID})
<|GREEN Socket Engine:|>   $config{SOCKETENGINE}

To build with these settings run '<|GREEN make ${\join ' ', @makeargs} install|>' now.

EOM

# Routine to list out the extra/ modules that have been enabled.
# Note: when getting any filenames out and comparing, it's important to lc it if the
# file system is not case-sensitive (== Epoc, MacOS, OS/2 (incl DOS/DJGPP), VMS, Win32
# (incl NetWare, Symbian)). Cygwin may or may not be case-sensitive, depending on
# configuration, however, File::Spec does not currently tell us (it assumes Unix behavior).
sub list_extras () {
	use File::Spec;
	# @_ not used
	my $srcdir = File::Spec->catdir("src", "modules");
	my $abs_srcdir = File::Spec->rel2abs($srcdir);
	local $_;
	my $dd;
	opendir $dd, File::Spec->catdir($abs_srcdir, "extra") or die (File::Spec->catdir($abs_srcdir, "extra") . ": $!\n");
	my @extras = map { File::Spec->case_tolerant() ? lc($_) : $_ } (readdir($dd));
	closedir $dd;
	undef $dd;
	opendir $dd, $abs_srcdir or die "$abs_srcdir: $!\n";
	my @sources = map { File::Spec->case_tolerant() ? lc($_) : $_ } (readdir($dd));
	closedir $dd;
	undef $dd;
	my $maxlen = (sort { $b <=> $a } (map { length module_shrink $_ } (@extras)))[0];
	my %extras = ();
EXTRA:	for my $extra (@extras) {
		next if (File::Spec->curdir() eq $extra || File::Spec->updir() eq $extra);
		my $abs_extra = File::Spec->catfile($abs_srcdir, "extra", $extra);
		my $abs_source = File::Spec->catfile($abs_srcdir, $extra);
		next unless ($extra =~ m/\.(cpp|h)$/ || (-d $abs_extra)); # C++ Source/Header, or directory
		if (-l $abs_source) {
			# Symlink, is it in the right place?
			my $targ = readlink($abs_source);
			my $abs_targ = File::Spec->rel2abs($targ, $abs_srcdir);
			if ($abs_targ eq $abs_extra) {
				$extras{$extra} = "\e[32;1menabled\e[0m";
			} else {
				$extras{$extra} = sprintf("\e[31;1mwrong symlink target (%s)\e[0m", $abs_targ);
			}
		} elsif (-e $abs_source) {
			my ($devext, $inoext) = stat($abs_extra);
			my ($devsrc, $inosrc, undef, $lnksrc) = stat($abs_source);
			if ($lnksrc > 1) {
				if ($devsrc == $devext && $inosrc == $inoext) {
					$extras{$extra} = "\e[32;1menabled\e[0m";
				} else {
					$extras{$extra} = sprintf("\e[31;1mwrong hardlink target (%d:%d)\e[0m", $devsrc, $inosrc);
				}
			} else {
				open my $extfd, "<", $abs_extra;
				open my $srcfd, "<", $abs_source;
				local $/ = undef;
				if (scalar(<$extfd>) eq scalar(<$srcfd>)) {
					$extras{$extra} = "\e[32;1menabled\e[0m";
				} else {
					$extras{$extra} = sprintf("\e[31;1mout of synch (re-copy)\e[0m");
				}
			}
		} else {
			$extras{$extra} = "\e[33;1mdisabled\e[0m";
		}
	}
	# Now let's add dependency info
	for my $extra (keys(%extras)) {
		next unless $extras{$extra} =~ m/enabled/; # only process enabled extras.
		my $abs_extra = File::Spec->catfile($abs_srcdir, "extra", $extra);
		my @deps = split /\s+/, get_directive($abs_extra, 'ModDep', '');
		for my $dep (@deps) {
			if (exists($extras{$dep})) {
				my $ref = \$extras{$dep}; # Take reference.
				if ($$ref !~ m/needed by/) {
					# First dependency found.
					if ($$ref =~ m/enabled/) {
						$$ref .= " (needed by \e[32;1m$extra\e[0m";
					} else {
						$$ref =~ s/\e\[.*?m//g; # Strip out previous coloring. Will be set in bold+red+blink later.
						$$ref .= " (needed by \e[0;32;1;5m$extra\e[0;31;1;5m";
					}
				} else {
					if ($$ref =~ m/enabled/) {
						$$ref .= ", \e[32;1m$extra\e[0m";
					} else {
						$$ref .= ", \e[0;32;1;5m$extra\e[0;31;1;5m";
					}
				}
			}
		}
	}
	for my $extra (sort {$a cmp $b} keys(%extras)) {
		my $text = $extras{$extra};
		if ($text =~ m/needed by/ && $text !~ m/enabled/) {
			printf "\e[31;1;5m%-*s = %s%s\e[0m\n", $maxlen, module_shrink($extra), $text, ($text =~ m/needed by/ ? ")" : "");
		} else {
			printf "%-*s = %s%s\n", $maxlen, module_shrink($extra), $text, ($text =~ m/needed by/ ? "\e[0m)" : "");
		}
	}
	return keys(%extras) if wantarray; # Can be used by manage_extras.
}

sub enable_extras(@) {
	my $moduledir = catdir $RealDir, 'src', 'modules';
	my $extradir = catdir $moduledir, 'extra';

	for my $extra (@_) {
		my $shortname = module_shrink $extra;
		my $extrafile = module_expand $extra;

		my $extrapath = catfile $extradir, $extrafile;
		if (!-f $extrapath) {
			print_error "<|GREEN $extra|> is not an extra module!";
		}

		my $modulepath = catfile $moduledir, $extrafile;
		if (-l $modulepath) {
			if (readlink($modulepath) ne $extrapath) {
				unlink $modulepath; # Remove the dead symlink.
			} else {
				next; # Module is already enabled.
			}
		}

		if (-e $modulepath) {
			print_error "unable to symlink <|GREEN ${\abs2rel $modulepath}|> to <|GREEN ${\abs2rel $extrapath}|>: the target exists and is not a symlink.";
		} else {
			say console_format "Enabling the <|GREEN $shortname|> module ...";
			symlink $extrapath, $modulepath or print_error "unable to symlink <|GREEN ${\abs2rel $modulepath}|> to <|GREEN ${\abs2rel $extrapath}|>: $!";
		}
	}
}

sub disable_extras(@) {
	my $moduledir = catdir $RealDir, 'src', 'modules';
	my $extradir = catdir $moduledir, 'extra';

	for my $extra (@_) {
		my $shortname = module_shrink $extra;
		my $extrafile = module_expand $extra;

		my $modulepath = catfile $moduledir, $extrafile;
		my $extrapath = catfile $extradir, $extrafile;
		if (!-e $modulepath && !-e $extrapath) {
			print_error "the <|GREEN $shortname|> module does not exist!";
		} elsif (!-e $modulepath && -e $extrapath) {
			print_error "the <|GREEN $shortname|> module is not currently enabled!";
		} elsif ((-e $modulepath && !-e $extrapath) || !-l $modulepath) {
			print_error "the <|GREEN $shortname|> module is not an extra module!";
		} else {
			say console_format "Disabling the <|GREEN $shortname|> module ...";
			unlink $modulepath or print_error "unable to unlink <|GREEN $extrapath|>: $!";
		}
	}
}

#!/usr/bin/env perl

#
# InspIRCd -- Internet Relay Chat Daemon
#
#   Copyright (C) 2009-2010 Daniel De Graaf <danieldg@inspircd.org>
#   Copyright (C) 2007, 2009 Dennis Friis <peavey@inspircd.org>
#   Copyright (C) 2003, 2006-2008 Craig Edwards <craigedwards@brainbox.cc>
#   Copyright (C) 2006-2008 Robin Burchell <robin+git@viroteck.net>
#   Copyright (C) 2008 Thomas Stagner <aquanight@inspircd.org>
#   Copyright (C) 2007 John Brooks <john.brooks@dereferenced.net>
#   Copyright (C) 2006 Oliver Lupton <oliverlupton@gmail.com>
#   Copyright (C) 2003-2006 Craig McLure <craig@chatspike.net>
#
# This file is part of InspIRCd.  InspIRCd is free software: you can
# redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


BEGIN {
	require 5.8.0;
}

use strict;
use warnings FATAL => qw(all);

use File::Copy ();
use File::Spec::Functions qw(rel2abs);
use Cwd;
use Getopt::Long;

use make::configure;
use make::utilities;

our ($opt_use_gnutls, $opt_use_openssl, $opt_nointeractive, $opt_socketengine,
     $opt_system, $opt_uid, $opt_base_dir, $opt_config_dir, $opt_module_dir, $opt_binary_dir,
     $opt_data_dir, $opt_log_dir);

sub list_extras ();

sub enable_extras (@);

sub disable_extras (@);

my @opt_enableextras;
my @opt_disableextras;

GetOptions (
	'enable-gnutls' => \$opt_use_gnutls,
	'system' => \$opt_system,
	'uid=s' => \$opt_uid,
	'enable-openssl' => \$opt_use_openssl,
	'disable-interactive' => \$opt_nointeractive,
	'socketengine=s' => \$opt_socketengine,
	'prefix=s' => \$opt_base_dir,
	'config-dir=s' => \$opt_config_dir,
	'module-dir=s' => \$opt_module_dir,
	'binary-dir=s' => \$opt_binary_dir,
	'data-dir=s' => \$opt_data_dir,
	'log-dir=s' => \$opt_log_dir,
	'help'	=> \&cmd_help,
	'update' => \&cmd_update,
	'clean' => \&cmd_clean,
	'list-extras' => sub { list_extras; exit 0; }, # This, --enable-extras, and --disable-extras are for non-interactive managing.
	'enable-extras=s@' => \@opt_enableextras, # ^
	'disable-extras=s@' => \@opt_disableextras, # ^
);

if (scalar(@opt_enableextras) + scalar(@opt_disableextras) > 0) {
	@opt_enableextras = split /,/, join(',', @opt_enableextras);
	@opt_disableextras = split /,/, join(',', @opt_disableextras);
	enable_extras(@opt_enableextras);
	disable_extras(@opt_disableextras);
	list_extras;
	print "Remember: YOU are responsible for making sure any libraries needed have been installed!\n";
	exit 0;
}

our $interactive = !(
	(defined $opt_base_dir) ||
	(defined $opt_config_dir) ||
	(defined $opt_module_dir) ||
	(defined $opt_base_dir) ||
	(defined $opt_binary_dir) ||
	(defined $opt_data_dir) ||
	(defined $opt_log_dir) ||
	(defined $opt_nointeractive) ||
	(defined $opt_socketengine) ||
	(defined $opt_use_openssl) ||
	(defined $opt_system) ||
	(defined $opt_uid) ||
	(defined $opt_use_gnutls)
);

our %config = read_configure_cache();

print "Checking for cache from previous configure... ";
print %config ? "found\n" : "not found\n";

$config{BASE_DIR} = getcwd()."/run";

if (defined $opt_base_dir) {
	$config{BASE_DIR} = $opt_base_dir;
} elsif (defined $opt_system) {
	$config{BASE_DIR} = '/var/lib/inspircd';
}

if (defined $opt_system) {
	$config{UID} = defined $opt_uid ? $opt_uid : 'ircd';
	$config{CONFIG_DIR} = '/etc/inspircd';
	$config{MODULE_DIR} = '/usr/lib/inspircd';
	$config{BINARY_DIR} = '/usr/sbin/';
	$config{DATA_DIR} = '/var/inspircd';
	$config{LOG_DIR} = '/var/log/inspircd';
} else {
	$config{UID} = defined $opt_uid ? $opt_uid : $<;
	$config{CONFIG_DIR} = rel2abs($config{BASE_DIR}."/conf");
	$config{MODULE_DIR} = rel2abs($config{BASE_DIR}."/modules");
	$config{BINARY_DIR} = rel2abs($config{BASE_DIR}."/bin");
	$config{DATA_DIR} = rel2abs($config{BASE_DIR}."/data");
	$config{LOG_DIR} = rel2abs($config{BASE_DIR}."/logs");
}

if (defined $opt_config_dir) {
	$config{CONFIG_DIR} = $opt_config_dir;
}
if (defined $opt_module_dir) {
	$config{MODULE_DIR} = $opt_module_dir;
}
if (defined $opt_binary_dir) {
	$config{BINARY_DIR} = $opt_binary_dir;
}
if (defined $opt_data_dir) {
	$config{DATA_DIR} = $opt_data_dir;
}
if (defined $opt_log_dir) {
	$config{LOG_DIR} = $opt_log_dir;
}
chomp($config{HAS_GNUTLS}   = `pkg-config --modversion gnutls 2>/dev/null`);
chomp($config{HAS_OPENSSL}  = `pkg-config --modversion openssl 2>/dev/null`);

chomp(our $gnutls_ver = $config{HAS_GNUTLS});
chomp(our $openssl_ver = $config{HAS_OPENSSL});
$config{USE_GNUTLS}	    = 0;
if (defined $opt_use_gnutls)
{
	$config{USE_GNUTLS} = "y";					# Use gnutls.
}
$config{USE_OPENSSL}	= 0;						# Use openssl.
if (defined $opt_use_openssl)
{
	$config{USE_OPENSSL} = "y";
}

$config{CXX} = defined $ENV{CXX} && !system("$ENV{CXX} -v > /dev/null 2>&1") ? $ENV{CXX} : find_compiler();
if ($config{CXX} eq "") {
	print "A C++ compiler could not be detected on your system!\n";
	print "Set the CXX environment variable to the full path if this is incorrect.\n";
	exit 1;	
}

our %cxx = get_compiler_info($config{CXX});
if ($cxx{UNSUPPORTED}) {
	print "Your C++ compiler is too old to build InspIRCd!\n";
	print "Reason: $cxx{REASON}\n";
	exit 1;
}

if ($config{HAS_OPENSSL} =~ /^([-[:digit:].]+)(?:[a-z])?(?:\-[a-z][0-9])?/) {
	$config{HAS_OPENSSL} = $1;
} else {
	$config{HAS_OPENSSL} = "";
}

$config{HAS_CLOCK_GETTIME} = run_test 'clock_gettime()', test_file($config{CXX}, 'clock_gettime.cpp', '-lrt');
$config{HAS_EVENTFD} = run_test 'eventfd()', test_file($config{CXX}, 'eventfd.cpp');

if ($config{HAS_EPOLL} = run_test 'epoll', test_header($config{CXX}, 'sys/epoll.h')) {
	$config{SOCKETENGINE} ||= 'epoll';
}

if ($config{HAS_KQUEUE} = run_test 'kqueue', test_file($config{CXX}, 'kqueue.cpp')) {
	$config{SOCKETENGINE} ||= 'kqueue';
}

if ($config{HAS_PORTS} = run_test 'Solaris IOCP', test_header($config{CXX}, 'port.h')) {
	$config{SOCKETENGINE} ||= 'ports';
}

if ($config{HAS_POLL} = run_test 'poll', test_header($config{CXX}, 'poll.h')) {
	$config{SOCKETENGINE} ||= 'poll';
}

# Select is available on all platforms
$config{HAS_SELECT} = 1;
$config{SOCKETENGINE} ||= "select";

if (defined $opt_socketengine) {
	my $cfgkey = "HAS_" . uc $opt_socketengine;
	if ($config{$cfgkey} && -f "src/socketengines/socketengine_$opt_socketengine.cpp") {
		$config{SOCKETENGINE} = $opt_socketengine;
	} else {
		print "Unable to use a socket engine which is not supported on this platform ($opt_socketengine)!\n";
		print "Available socket engines are:";
		foreach (<src/socketengines/socketengine_*.cpp>) {
			s/src\/socketengines\/socketengine_(\w+)\.cpp/$1/;
			print " $1" if $config{"HAS_" . uc $1};
		}
		print "\n";	
		exit 1;
	}
}

print "Checking for libgnutls... ";
if (defined($config{HAS_GNUTLS}) && (($config{HAS_GNUTLS}) || ($config{HAS_GNUTLS} eq "y"))) {
	if (defined($gnutls_ver) && ($gnutls_ver ne "")) {
		print "yes\n";
		$config{HAS_GNUTLS} = "y";
	} else {
		print "no\n";
		$config{HAS_GNUTLS} = "n";
	}
} else {
	print "no\n";
	$config{HAS_GNUTLS} = "n";
}

print "Checking for openssl... ";
if (defined($config{HAS_OPENSSL}) && (($config{HAS_OPENSSL}) || ($config{HAS_OPENSSL} eq "y"))) {
	if (defined($openssl_ver) && ($openssl_ver ne "")) {
		print "yes\n";
		$config{HAS_OPENSSL} = "y";
	} else {
		print "no\n";
		$config{HAS_OPENSSL} = "n";
	}
} else {
	print "no\n";
	$config{HAS_OPENSSL} = "n";
}

if ($interactive)
{
	# Clear the screen.
	system 'tput', 'clear';

	my %version = get_version();

	# Display Introduction Message..
	print <<"STOP" ;
Welcome to the \e[1mInspIRCd\e[0m configuration program! (\e[1minteractive mode\e[0m)
\e[1mPackage maintainers: Type ./configure --help for non-interactive help\e[0m

*** If you are unsure of any of these values, leave it blank for    ***
*** standard settings that will work, and your server will run      ***
*** using them. Please consult your IRC network admin if in doubt.  ***

Press \e[1m<RETURN>\e[0m to accept the default for any option, or enter
a new value. Please note: You will \e[1mHAVE\e[0m to read the docs
dir, otherwise you won't have a config file!

Your operating system is: \e[1;32m$^O\e[0m 
STOP
	print "Your InspIRCd version is: \e[1;32m";
	print "$version{MAJOR}.$version{MINOR}.$version{PATCH}+$version{LABEL}";
	print "\e[0m\n\n";
	print "The following compiler has been detected: \e[1;32m$cxx{NAME} $cxx{VERSION}\e[0m ($config{CXX})\n\n";

	# Check that the user actually wants this version.
	if ($version{LABEL} ne 'release') {
		print <<"EOW" ;
\e[1;31mWARNING!\e[0m You are building a development version. This contains code which has
not been tested as heavily and may contain various faults which could seriously
affect the running of your server. It is recommended that you use a stable
version instead.

You can obtain the latest stable version from https://github.com/inspircd/inspircd/releases
or by running `git checkout insp20` if you are installing from Git.

EOW
	exit 1 unless prompt_bool(1, 'I understand this warning and want to continue anyway.', 0);
	}

	# Directory Settings..
	my $tmpbase = $config{BASE_DIR};
	$config{BASE_DIR} = prompt_dir(1, 'What directory do you wish to install the InspIRCd base?', $config{BASE_DIR});
	if ($tmpbase ne $config{BASE_DIR}) {
		$config{CONFIG_DIR} = rel2abs($config{BASE_DIR}."/conf");
		$config{MODULE_DIR} = rel2abs($config{BASE_DIR}."/modules");
		$config{DATA_DIR} = rel2abs($config{BASE_DIR}."/data");
		$config{LOG_DIR} = rel2abs($config{BASE_DIR}."/logs");
		$config{BINARY_DIR} = rel2abs($config{BASE_DIR}."/bin");
	}

	$config{BINARY_DIR} = prompt_dir(1, 'In what directory should the InspIRCd binary be placed?', $config{BINARY_DIR});
	$config{CONFIG_DIR} = prompt_dir(1, 'In what directory are the configuration files to be stored?', $config{CONFIG_DIR});
	$config{DATA_DIR} = prompt_dir(1, 'In what directory are variable data files to be stored?', $config{DATA_DIR});
	$config{LOG_DIR} = prompt_dir(1, 'In what directory are log files to be stored?', $config{LOG_DIR});
	$config{MODULE_DIR} = prompt_dir(1, 'In what directory are the modules to be placed?', $config{MODULE_DIR});

	my $chose_hiperf = 0;
	if ($config{HAS_KQUEUE}) {
		$config{USE_KQUEUE} = prompt_bool(1, 'Your operating system has support for the high performance kqueue socket engine. Would you like to enable it?', 1);
		if ($config{USE_KQUEUE}) {
			$config{SOCKETENGINE} = "kqueue";
			$chose_hiperf = 1;
		}
	}
	if ($config{HAS_EPOLL}) {
		$config{USE_EPOLL} = prompt_bool(1, 'Your operating system has support for the high performance epoll socket engine. Would you like to enable it?', 1);
		if ($config{USE_EPOLL}) {
			$config{SOCKETENGINE} = "epoll";
			$chose_hiperf = 1;
		}
	}
	if ($config{HAS_PORTS}) {
		$config{USE_PORTS} = prompt_bool(1, 'Your operating system has support for the high performance IOCP socket engine. Would you like to enable it?', 1);
		if ($config{USE_PORTS}) {
			$config{SOCKETENGINE} = "ports";
			$chose_hiperf = 1;
		}
	}

	if (!$chose_hiperf && $config{HAS_POLL}) {
		$config{USE_POLL} = prompt_bool(1, 'Your operating system has support for the mid performance poll socket engine. Would you like to enable it?', 1);
		if ($config{USE_POLL}) {
			$config{SOCKETENGINE} = "poll";
		}
	}
	unless ($chose_hiperf || $config{USE_POLL})
	{
		print "No high-performance socket engines are available, or you chose not to enable one. Defaulting to select() engine.\n\n";
		$config{SOCKETENGINE} = "select";
	}

	if ($config{HAS_GNUTLS} eq "y" || $config{HAS_OPENSSL} eq "y")
	{
		print "Detected GnuTLS version: \e[1;32m" . $gnutls_ver . "\e[0m\n";
		print "Detected OpenSSL version: \e[1;32m" . $openssl_ver . "\e[0m\n\n";

		$config{USE_SSL} = prompt_bool(1, 'One or more SSL libraries detected. Would you like to enable SSL support?', 1);
		if ($config{USE_SSL})
		{
			if ($config{HAS_GNUTLS} eq "y")
			{
				$config{USE_GNUTLS} = prompt_bool(1, 'Would you like to enable SSL with m_ssl_gnutls (recommended)?', 1);
				if ($config{USE_GNUTLS})
				{
					print "Using GnuTLS SSL module.\n\n";
					unlink 'src/modules/m_ssl_gnutls.cpp' if -f 'src/modules/m_ssl_gnutls.cpp';
					symlink "extra/m_ssl_gnutls.cpp", "src/modules/m_ssl_gnutls.cpp" or print STDERR "Symlink failed: $!\n";
				}
			}

			if ($config{HAS_OPENSSL} eq "y")
			{
				$config{USE_OPENSSL} = prompt_bool(1, 'Would you like to enable SSL with m_ssl_openssl (recommended)?', 1);
				if ($config{USE_OPENSSL})
				{
					print "Using OpenSSL SSL module.\n\n";
					unlink 'src/modules/m_ssl_openssl.cpp' if -f 'src/modules/m_ssl_openssl.cpp';
					symlink "extra/m_ssl_openssl.cpp", "src/modules/m_ssl_openssl.cpp" or print STDERR "Symlink failed: $!\n";
				}
			}
		}
	}
	else
	{
		print "\nCould not detect OpenSSL or GnuTLS. Make sure pkg-config is installed and\n";
		print "is in your path.\n\n";
	}
}

# We are on a POSIX system, we can enable POSIX extras without asking
symlink "extra/m_regex_posix.cpp", "src/modules/m_regex_posix.cpp";

if (($config{USE_GNUTLS}) && ($config{HAS_GNUTLS} ne "y"))
{
	print "Sorry, but I couldn't detect GnuTLS. Make sure pkg-config is in your path.\n";
	exit 1;
}
if (($config{USE_OPENSSL}) && ($config{HAS_OPENSSL} ne "y"))
{
	print "Sorry, but I couldn't detect OpenSSL. Make sure pkg-config is in your path.\n";
	exit 1;
}

if ($config{USE_GNUTLS} || $config{USE_OPENSSL}) {
	if (my $val = prompt_bool($interactive, 'Would you like to generate SSL certificates now?', $interactive)) {
		unless (-r "$config{CONFIG_DIR}/key.pem" && -r "$config{CONFIG_DIR}/cert.pem" && -r "$config{CONFIG_DIR}/dhparams.pem") {
			unless (system './tools/genssl auto') {
				print "\nCertificate generation complete, copying to config directory... ";
				File::Copy::move("key.pem", "$config{CONFIG_DIR}/key.pem") or print STDERR "Could not copy key.pem!\n";
				File::Copy::move("cert.pem", "$config{CONFIG_DIR}/cert.pem") or print STDERR "Could not copy cert.pem!\n";
				File::Copy::move("dhparams.pem", "$config{CONFIG_DIR}/dhparams.pem") or print STDERR "Could not copy dhparams.pem!\n";
				print "Done.\n\n";
			}
		} else {
			print "SSL certificates found, skipping.\n\n"
		}
	} else {
		print "Skipping SSL certificate generation in non-interactive mode.\n\n";
	}
} else {
	print "Skipping SSL Certificate generation, SSL support is not available.\n\n";
}

print "Writing \e[1;32m.config.cache\e[0m ...\n";
write_configure_cache(%config);
parse_templates(\%config, \%cxx);
dump_hash();

print "\n";
print "To build your server with these settings, please run '\e[1;32mmake\e[0m' now.\n";
if ($config{USE_GNUTLS} || $config{USE_OPENSSL}) {
	print "Please note: for \e[1;32mSSL support\e[0m you will need to load required\n";
	print "modules in your config. This configure script has added those modules to the\n";
	print "build process. For more info, please refer to:\n";
	print "\e[1;32mhttp://wiki.inspircd.org/Installation_From_Tarball\e[0m\n";
}
print "*** \e[1;32mRemember to edit your configuration files!!!\e[0m ***\n\n";

# Routine to list out the extra/ modules that have been enabled.
# Note: when getting any filenames out and comparing, it's important to lc it if the
# file system is not case-sensitive (== Epoc, MacOS, OS/2 (incl DOS/DJGPP), VMS, Win32
# (incl NetWare, Symbian)). Cygwin may or may not be case-sensitive, depending on
# configuration, however, File::Spec does not currently tell us (it assumes Unix behavior).
sub list_extras () {
	use File::Spec;
	# @_ not used
	my $srcdir = File::Spec->catdir("src", "modules");
	my $abs_srcdir = File::Spec->rel2abs($srcdir);
	local $_;
	my $dd;
	opendir $dd, File::Spec->catdir($abs_srcdir, "extra") or die (File::Spec->catdir($abs_srcdir, "extra") . ": $!\n");
	my @extras = map { File::Spec->case_tolerant() ? lc($_) : $_ } (readdir($dd));
	closedir $dd;
	undef $dd;
	opendir $dd, $abs_srcdir or die "$abs_srcdir: $!\n";
	my @sources = map { File::Spec->case_tolerant() ? lc($_) : $_ } (readdir($dd));
	closedir $dd;
	undef $dd;
	my $maxlen = (sort { $b <=> $a } (map {length($_)} (@extras)))[0];
	my %extras = ();
EXTRA:	for my $extra (@extras) {
		next if (File::Spec->curdir() eq $extra || File::Spec->updir() eq $extra);
		my $abs_extra = File::Spec->catfile($abs_srcdir, "extra", $extra);
		my $abs_source = File::Spec->catfile($abs_srcdir, $extra);
		next unless ($extra =~ m/\.(cpp|h)$/ || (-d $abs_extra)); # C++ Source/Header, or directory
		if (-l $abs_source) {
			# Symlink, is it in the right place?
			my $targ = readlink($abs_source);
			my $abs_targ = File::Spec->rel2abs($targ, $abs_srcdir);
			if ($abs_targ eq $abs_extra) {
				$extras{$extra} = "\e[32;1menabled\e[0m";
			} else {
				$extras{$extra} = sprintf("\e[31;1mwrong symlink target (%s)\e[0m", $abs_targ);
			}
		} elsif (-e $abs_source) {
			my ($devext, $inoext) = stat($abs_extra);
			my ($devsrc, $inosrc, undef, $lnksrc) = stat($abs_source);
			if ($lnksrc > 1) {
				if ($devsrc == $devext && $inosrc == $inoext) {
					$extras{$extra} = "\e[32;1menabled\e[0m";
				} else {
					$extras{$extra} = sprintf("\e[31;1mwrong hardlink target (%d:%d)\e[0m", $devsrc, $inosrc);
				}
			} else {
				open my $extfd, "<", $abs_extra;
				open my $srcfd, "<", $abs_source;
				local $/ = undef;
				if (scalar(<$extfd>) eq scalar(<$srcfd>)) {
					$extras{$extra} = "\e[32;1menabled\e[0m";
				} else {
					$extras{$extra} = sprintf("\e[31;1mout of synch (re-copy)\e[0m");
				}
			}
		} else {
			$extras{$extra} = "\e[33;1mdisabled\e[0m";
		}
	}
	# Now let's add dependency info
	for my $extra (keys(%extras)) {
		next unless $extras{$extra} =~ m/enabled/; # only process enabled extras.
		my $abs_extra = File::Spec->catfile($abs_srcdir, "extra", $extra);
		my @deps = split /\s+/, get_property($abs_extra, 'ModDep');
		for my $dep (@deps) {
			if (exists($extras{$dep})) {
				my $ref = \$extras{$dep}; # Take reference.
				if ($$ref !~ m/needed by/) {
					# First dependency found.
					if ($$ref =~ m/enabled/) {
						$$ref .= " (needed by \e[32;1m$extra\e[0m";
					} else {
						$$ref =~ s/\e\[.*?m//g; # Strip out previous coloring. Will be set in bold+red+blink later.
						$$ref .= " (needed by \e[0;32;1;5m$extra\e[0;31;1;5m";
					}
				} else {
					if ($$ref =~ m/enabled/) {
						$$ref .= ", \e[32;1m$extra\e[0m";
					} else {
						$$ref .= ", \e[0;32;1;5m$extra\e[0;31;1;5m";
					}
				}
			}
		}
	}
	for my $extra (sort {$a cmp $b} keys(%extras)) {
		my $text = $extras{$extra};
		if ($text =~ m/needed by/ && $text !~ m/enabled/) {
			printf "\e[31;1;5m%-*s = %s%s\e[0m\n", $maxlen, $extra, $text, ($text =~ m/needed by/ ? ")" : "");
		} else {
			printf "%-*s = %s%s\n", $maxlen, $extra, $text, ($text =~ m/needed by/ ? "\e[0m)" : "");
		}
	}
	return keys(%extras) if wantarray; # Can be used by manage_extras.
}

sub enable_extras (@) {
	my (@extras) = @_;
	for my $extra (@extras) {
		my $extrapath = "src/modules/extra/$extra";
		if (!-e $extrapath) {
			print STDERR "Cannot enable \e[32;1m$extra\e[0m : No such file or directory in src/modules/extra\n";
			next;
		}
		my $source = "src/modules/$extra";
		if (-e $source) {
			print STDERR "Cannot enable \e[32;1m$extra\e[0m : destination in src/modules exists (might already be enabled?)\n";
			next;
		}
		# Get dependencies, and add them to be processed.
		my @deps = split /\s+/, get_property($extrapath, 'ModDep');
		for my $dep (@deps) {
			next if scalar(grep { $_ eq $dep } (@extras)) > 0; # Skip if we're going to be enabling it anyway.
			if (!-e "src/modules/$dep" && !-e "include/$dep") {
				if (-e "src/modules/extra/$dep") {
					print STDERR "Will also enable extra \e[32;1m$dep\e[0m (needed by \e[32;1m$extra\e[0m)\n";
					push @extras, $dep;
				} else {
					print STDERR "\e[33;1mWARNING:\e[0m module \e[32;1m$extra\e[0m might be missing dependency \e[32;1m$dep\e[0m - YOU are responsible for satisfying it!\n";
				}
			}
		}
		print "Enabling $extra ... \n";
		symlink "extra/$extra", $source or print STDERR "$source: Cannot link to 'extra/$extra': $!\n";
	}
}

sub disable_extras (@)
{
	opendir my $dd, "src/modules/extra/";
	my @files = readdir($dd);
	closedir $dd;
	my (@extras) = @_;
EXTRA:	for my $extra (@extras) {
		my $extrapath = "src/modules/extra/$extra";
		my $source = "src/modules/$extra";
		if (!-e $extrapath) {
			print STDERR "Cannot disable \e[32;1m$extra\e[0m : Is not an extra\n";
			next;
		}
		if ((! -l $source) || readlink($source) ne "extra/$extra") {
			print STDERR "Cannot disable \e[32;1m$extra\e[0m : Source is not a link or doesn't refer to the right file. Remove manually if this is in error.\n";
			next;
		}
		# Check if anything needs this.
		for my $file (@files) {
			my @deps = split /\s+/, get_property("src/modules/extra/$file", 'ModDep');
			# File depends on this extra...
			if (scalar(grep { $_ eq $extra } @deps) > 0) {
				# And is both enabled and not about to be disabled.
				if (-e "src/modules/$file" && scalar(grep { $_ eq $file } @extras) < 1) {
					print STDERR "Cannot disable \e[32;1m$extra\e[0m : is needed by \e[32;1m$file\e[0m\n";
					next EXTRA;
				}
			}
		}
		# Now remove.
		print "Disabling $extra ... \n";
		unlink "src/modules/$extra" or print STDERR "Cannot disable \e[32;1m$extra\e[0m : $!\n";
	}
}

#!/usr/bin/env perl

#
# InspIRCd -- Internet Relay Chat Daemon
#
#   Copyright (C) 2009-2010 Daniel De Graaf <danieldg@inspircd.org>
#   Copyright (C) 2007, 2009 Dennis Friis <peavey@inspircd.org>
#   Copyright (C) 2003, 2006-2008 Craig Edwards <craigedwards@brainbox.cc>
#   Copyright (C) 2006-2008 Robin Burchell <robin+git@viroteck.net>
#   Copyright (C) 2008 Thomas Stagner <aquanight@inspircd.org>
#   Copyright (C) 2007 John Brooks <john.brooks@dereferenced.net>
#   Copyright (C) 2006 Oliver Lupton <oliverlupton@gmail.com>
#   Copyright (C) 2003-2006 Craig McLure <craig@chatspike.net>
#
# This file is part of InspIRCd.  InspIRCd is free software: you can
# redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


BEGIN {
	require 5.8.0;
}

use strict;
use warnings FATAL => qw(all);

use File::Copy ();
use File::Spec::Functions qw(rel2abs);
use Cwd;
use Getopt::Long;

use make::configure;
use make::utilities;

our ($opt_use_gnutls, $opt_use_openssl, $opt_nointeractive, $opt_socketengine, $opt_freebsd_port,
     $opt_system, $opt_uid, $opt_base_dir, $opt_config_dir, $opt_module_dir, $opt_binary_dir,
     $opt_data_dir, $opt_log_dir);

sub list_extras ();

sub enable_extras (@);

sub disable_extras (@);

my @opt_enableextras;
my @opt_disableextras;

GetOptions (
	'enable-gnutls' => \$opt_use_gnutls,
	'system' => \$opt_system,
	'uid=s' => \$opt_uid,
	'enable-openssl' => \$opt_use_openssl,
	'disable-interactive' => \$opt_nointeractive,
	'socketengine=s' => \$opt_socketengine,
	'enable-freebsd-ports-openssl' => \$opt_freebsd_port,
	'prefix=s' => \$opt_base_dir,
	'config-dir=s' => \$opt_config_dir,
	'module-dir=s' => \$opt_module_dir,
	'binary-dir=s' => \$opt_binary_dir,
	'data-dir=s' => \$opt_data_dir,
	'log-dir=s' => \$opt_log_dir,
	'help'	=> sub { showhelp(); },
	'update' => sub { update(); },
	'clean' => sub { clean(); },
	'list-extras' => sub { list_extras; exit 0; }, # This, --enable-extras, and --disable-extras are for non-interactive managing.
	'enable-extras=s@' => \@opt_enableextras, # ^
	'disable-extras=s@' => \@opt_disableextras, # ^
);

if (scalar(@opt_enableextras) + scalar(@opt_disableextras) > 0) {
	@opt_enableextras = split /,/, join(',', @opt_enableextras);
	@opt_disableextras = split /,/, join(',', @opt_disableextras);
	enable_extras(@opt_enableextras);
	disable_extras(@opt_disableextras);
	list_extras;
	print "Remember: YOU are responsible for making sure any libraries needed have been installed!\n";
	exit 0;
}

our $interactive = !(
	(defined $opt_base_dir) ||
	(defined $opt_config_dir) ||
	(defined $opt_module_dir) ||
	(defined $opt_base_dir) ||
	(defined $opt_binary_dir) ||
	(defined $opt_data_dir) ||
	(defined $opt_log_dir) ||
	(defined $opt_nointeractive) ||
	(defined $opt_socketengine) ||
	(defined $opt_use_openssl) ||
	(defined $opt_system) ||
	(defined $opt_uid) ||
	(defined $opt_use_gnutls) ||
	(defined $opt_freebsd_port)
);

our $topdir = getcwd();
our @modlist = ();
our %config = ();
our $cache_loaded = getcache();

$config{BASE_DIR} = $topdir."/run";

if (defined $opt_base_dir) {
	$config{BASE_DIR} = $opt_base_dir;
} elsif (defined $opt_system) {
	$config{BASE_DIR} = '/var/lib/inspircd';
}

if (defined $opt_system) {
	$config{UID} = $opt_uid || 'ircd';
	$config{CONFIG_DIR} = '/etc/inspircd';
	$config{MODULE_DIR} = '/usr/lib/inspircd';
	$config{BINARY_DIR} = '/usr/sbin/';
	$config{BUILD_DIR} = $topdir."/build";
	$config{DATA_DIR} = '/var/inspircd';
	$config{LOG_DIR} = '/var/log/inspircd';
} else {
	$config{UID} = $opt_uid || $<;
	$config{CONFIG_DIR} = rel2abs($config{BASE_DIR}."/conf");
	$config{MODULE_DIR} = rel2abs($config{BASE_DIR}."/modules");
	$config{BINARY_DIR} = rel2abs($config{BASE_DIR}."/bin");
	$config{BUILD_DIR} = rel2abs($topdir."/build");
	$config{DATA_DIR} = rel2abs($config{BASE_DIR}."/data");
	$config{LOG_DIR} = rel2abs($config{BASE_DIR}."/logs");	
}

if (defined $opt_config_dir) {
	$config{CONFIG_DIR} = $opt_config_dir;
}
if (defined $opt_module_dir) {
	$config{MODULE_DIR} = $opt_module_dir;
}
if (defined $opt_binary_dir) {
	$config{BINARY_DIR} = $opt_binary_dir;
}
if (defined $opt_data_dir) {
	$config{DATA_DIR} = $opt_data_dir;
}
if (defined $opt_log_dir) {
	$config{LOG_DIR} = $opt_log_dir;
}
chomp($config{HAS_GNUTLS}   = `pkg-config --modversion gnutls 2>/dev/null`); # GNUTLS Version.

if (defined $opt_freebsd_port)
{
	chomp($config{HAS_OPENSSL} = `pkg-config --modversion openssl 2>/dev/null`);
	chomp($config{HAS_OPENSSL_PORT}  = `pkg-config --modversion openssl 2>/dev/null`);
	$config{USE_FREEBSD_BASE_SSL} = "n";
}
else
{
	if ($^O eq "freebsd")
	{
		# default: use base ssl
		chomp($config{HAS_OPENSSL} = `openssl version | cut -d ' ' -f 2`);			# OpenSSL version, freebsd specific
		chomp($config{HAS_OPENSSL_PORT}  = `pkg-config --modversion openssl 2>/dev/null`);	# Port version, may be different
	}
	else
	{
		chomp($config{HAS_OPENSSL}  = `pkg-config --modversion openssl 2>/dev/null`);		# Openssl version, others
		$config{HAS_OPENSSL_PORT} = "";
	}
}

chomp(our $gnutls_ver = $config{HAS_GNUTLS});
chomp(our $openssl_ver = $config{HAS_OPENSSL});
$config{USE_GNUTLS}	    = "n";
if (defined $opt_use_gnutls)
{
	$config{USE_GNUTLS} = "y";					# Use gnutls.
}
$config{USE_OPENSSL}	= "n";						# Use openssl.
if (defined $opt_use_openssl)
{
	$config{USE_OPENSSL} = "y";
}

$config{STARTSCRIPT} = $^O eq 'darwin' ? 'org.inspircd.plist' : 'inspircd';

$config{CXX} = defined $ENV{CXX} && !system("$ENV{CXX} -v > /dev/null 2>&1") ? $ENV{CXX} : find_compiler();
if ($config{CXX} eq "") {
	print "A C++ compiler could not be detected on your system!\n";
	print "Set the CXX environment variable to the full path if this is incorrect.\n";
	exit 1;	
}

our %cxx = get_compiler_info($config{CXX});
if ($cxx{UNSUPPORTED}) {
	print "Your C++ compiler is too old to build InspIRCd!\n";
	print "Reason: $cxx{REASON}\n";
	exit 1;
}

if ($config{HAS_OPENSSL} =~ /^([-[:digit:].]+)(?:[a-z])?(?:\-[a-z][0-9])?/) {
	$config{HAS_OPENSSL} = $1;
} else {
	$config{HAS_OPENSSL} = "";
}

# Get and Set some important vars..
getmodules();

sub clean
{
	unlink(".config.cache");
}

sub update
{
	eval {
		# Does the cache file exist?
		if (!getcache()) {
			# No, No it doesn't.. *BASH*
			print "You have not run ./configure before. Please do this before trying to run the update script.\n";
			exit 1;
		} else {
			# We've Loaded the cache file and all our variables..
			$topdir = getcwd();
			getmodules();
			print "Updating files...\n";
			%cxx = get_compiler_info($config{CXX});
			writefiles();
			makecache();
			print "Complete.\n";
			exit;
		}
	};
	if ($@)
	{
		print "Configure update failed: $@\n";
	}
	exit;
}

print "Running non-interactive configure...\n" unless $interactive;
print "Checking for cache from previous configure... ";
print ($cache_loaded ? "found\n" : "not found\n");

print "Checking whether clock_gettime() is available... ";
if (test_file($config{CXX}, "clock_gettime.cpp", "-lrt")) {
	$config{HAS_CLOCK_GETTIME} = "true";
	print "yes\n";
} else {
	$config{HAS_CLOCK_GETTIME} = "false";
	print "no\n";
}

print "Checking whether eventfd() is available... ";
if (test_file($config{CXX}, "eventfd.cpp")) {
	$config{HAS_EVENTFD} = "true";
	print "yes\n";
} else {
	$config{HAS_EVENTFD} = "false";
	print "no\n";
}

print "Checking whether epoll is available... ";
$config{HAS_EPOLL} = test_header($config{CXX}, "sys/epoll.h");
print $config{HAS_EPOLL} ? "yes\n" : "no\n";
$config{SOCKETENGINE} ||= "epoll" if $config{HAS_EPOLL};

print "Checking whether Kqueue is available... ";
$config{HAS_KQUEUE} = test_file($config{CXX}, "kqueue.cpp");
print $config{HAS_KQUEUE} ? "yes\n" : "no\n";
$config{SOCKETENGINE} ||= "kqueue" if $config{HAS_KQUEUE};

print 'Checking whether Solaris IOCP is available... ';
$config{HAS_PORTS} = test_header($config{CXX}, 'port.h');
print $config{HAS_PORTS} ? "yes\n" : "no\n";
$config{SOCKETENGINE} ||= "ports" if $config{HAS_PORTS};

print 'Checking whether poll is available... ';
$config{HAS_POLL} = test_header($config{CXX}, 'poll.h');
print $config{HAS_POLL} ? "yes\n" : "no\n";
$config{SOCKETENGINE} ||= "poll" if $config{HAS_POLL};

# Select is available on all platforms
$config{HAS_SELECT} = 1;
$config{SOCKETENGINE} ||= "select";

if (defined $opt_socketengine) {
	my $cfgkey = "HAS_" . uc $opt_socketengine;
	if ($config{$cfgkey} && -f "src/socketengines/socketengine_$opt_socketengine.cpp") {
		$config{SOCKETENGINE} = $opt_socketengine;
	} else {
		print "Unable to use a socket engine which is not supported on this platform ($opt_socketengine)!\n";
		print "Available socket engines are:";
		foreach (<src/socketengines/socketengine_*.cpp>) {
			s/src\/socketengines\/socketengine_(\w+)\.cpp/$1/;
			print " $1" if $config{"HAS_" . uc $1};
		}
		print "\n";	
		exit 1;
	}
}

print "Checking for libgnutls... ";
if (defined($config{HAS_GNUTLS}) && (($config{HAS_GNUTLS}) || ($config{HAS_GNUTLS} eq "y"))) {
	if (defined($gnutls_ver) && ($gnutls_ver ne "")) {
		print "yes\n";
		$config{HAS_GNUTLS} = "y";
	} else {
		print "no\n";
		$config{HAS_GNUTLS} = "n";
	}
} else {
	print "no\n";
	$config{HAS_GNUTLS} = "n";
}

print "Checking for openssl... ";
if (defined($config{HAS_OPENSSL}) && (($config{HAS_OPENSSL}) || ($config{HAS_OPENSSL} eq "y"))) {
	if (defined($openssl_ver) && ($openssl_ver ne "")) {
		print "yes\n";
		$config{HAS_OPENSSL} = "y";
	} else {
		print "no\n";
		$config{HAS_OPENSSL} = "n";
	}
} else {
	print "no\n";
	$config{HAS_OPENSSL} = "n";
}

if ($interactive)
{
	# Clear the screen.
	system 'tput', 'clear';

	my $revision = getrevision();
	chomp(my $version = `sh src/version.sh`);

	# Display Introduction Message..
	print <<"STOP" ;
Welcome to the \e[1mInspIRCd\e[0m Configuration program! (\e[1minteractive mode\e[0m)
\e[1mPackage maintainers: Type ./configure --help for non-interactive help\e[0m

*** If you are unsure of any of these values, leave it blank for    ***
*** standard settings that will work, and your server will run      ***
*** using them. Please consult your IRC network admin if in doubt.  ***

Press \e[1m<RETURN>\e[0m to accept the default for any option, or enter
a new value. Please note: You will \e[1mHAVE\e[0m to read the docs
dir, otherwise you won't have a config file!

Your operating system is: \e[1;32m$^O\e[0m 
STOP
	print "Your InspIRCd version is: \e[1;32m";
	print $revision eq 'release' ? substr($version, 9) : substr($revision, 1);
	print "\e[0m\n\n";
	print "The following compiler has been detected: \e[1;32m$cxx{NAME} $cxx{VERSION}\e[0m ($config{CXX})\n\n";

	# Directory Settings..
	my $tmpbase = $config{BASE_DIR};
	dir_check("do you wish to install the InspIRCd base", "BASE_DIR");
	if ($tmpbase ne $config{BASE_DIR}) {
		$config{CONFIG_DIR} = rel2abs($config{BASE_DIR}."/conf");
		$config{MODULE_DIR} = rel2abs($config{BASE_DIR}."/modules");
		$config{DATA_DIR} = rel2abs($config{BASE_DIR}."/data");
		$config{LOG_DIR} = rel2abs($config{BASE_DIR}."/logs");
		$config{BINARY_DIR} = rel2abs($config{BASE_DIR}."/bin");
	}

	dir_check("are the configuration files", "CONFIG_DIR");
	dir_check("are the modules to be compiled to", "MODULE_DIR");
	dir_check("is the IRCd binary to be placed", "BINARY_DIR");
	dir_check("are variable data files to be located in", "DATA_DIR");
	dir_check("are the logs to be stored in", "LOG_DIR");
	dir_check("do you want the build to take place", "BUILD_DIR");
		
	my $chose_hiperf = 0;
	if ($config{HAS_KQUEUE}) {
		$config{USE_KQUEUE} = "y";
		yesno('USE_KQUEUE',"You are running a BSD operating system, and kqueue\nwas detected. Would you like to enable kqueue support?\nThis is likely to increase performance.\nIf you are unsure, answer yes.\n\nEnable kqueue?");
		print "\n";
		if ($config{USE_KQUEUE} eq "y") {
			$config{SOCKETENGINE} = "kqueue";
			$chose_hiperf = 1;
		}
	}
	if ($config{HAS_EPOLL}) {
		$config{USE_EPOLL} = "y";
		yesno('USE_EPOLL',"You are running a Linux 2.6+ operating system, and epoll\nwas detected. Would you like to enable epoll support?\nThis is likely to increase performance.\nIf you are unsure, answer yes.\n\nEnable epoll?");
		print "\n";
		if ($config{USE_EPOLL} eq "y") {
			$config{SOCKETENGINE} = "epoll";
			$chose_hiperf = 1;
		}
	}
	if ($config{HAS_PORTS}) {
		$config{USE_PORTS} = "y";
		yesno('USE_PORTS',"You are running Solaris 10.\nWould you like to enable I/O completion ports support?\nThis is likely to increase performance.\nIf you are unsure, answer yes.\n\nEnable support for I/O completion ports?");
		print "\n";
		if ($config{USE_PORTS} eq "y") {
			$config{SOCKETENGINE} = "ports";
			$chose_hiperf = 1;
		}
	}

	if (!$chose_hiperf && $config{HAS_POLL}) {
		$config{USE_POLL} = "y";
		yesno('USE_POLL', "Would you like to use poll?\nThis is likely to increase performance.\nIf you are unsure, answer yes.\n\nEnable poll?");
		if ($config{USE_POLL} eq "y") {
			$config{SOCKETENGINE} = "poll";
		}
	}
	if (!$chose_hiperf && $config{USE_POLL} ne "y")
	{
		print "No high-performance socket engines are available, or you chose\n";
		print "not to enable one. Defaulting to select() engine.\n\n";
		$config{SOCKETENGINE} = "select";
	}

	$config{USE_FREEBSD_BASE_SSL} = "n";
	$config{USE_FREEBSD_PORTS_SSL} = "n";
	if ($config{HAS_OPENSSL_PORT} ne "")
	{
		$config{USE_FREEBSD_PORTS_SSL} = "y";
		print "I have detected the OpenSSL FreeBSD port installed on your system,\n";
		print "version \e[1;32m".$config{HAS_OPENSSL_PORT}."\e[0m. Your base system OpenSSL is version \e[1;32m".$openssl_ver."\e[0m.\n\n";
		yesno('USE_FREEBSD_PORTS_SSL', "Do you want to use the FreeBSD ports version?");
		print "\n";
		$config{USE_FREEBSD_BASE_SSL} = "y" if ($config{USE_FREEBSD_PORTS_SSL} eq "n");

		if ($config{USE_FREEBSD_BASE_SSL} eq "n")
		{
			# update to port version
			$openssl_ver = $config{HAS_OPENSSL_PORT};
		}
	}
	else
	{
		$config{USE_FREEBSD_BASE_SSL} = "y" if ($^O eq "freebsd");
	}

	$config{USE_SSL} = "n";

	if ($config{HAS_GNUTLS} eq "y" || $config{HAS_OPENSSL} eq "y")
	{
		print "Detected GnuTLS version: \e[1;32m" . $gnutls_ver . "\e[0m\n";
		print "Detected OpenSSL version: \e[1;32m" . $openssl_ver . "\e[0m\n\n";

		yesno('USE_SSL', "One or more SSL libraries detected. Would you like to enable SSL support?");
		if ($config{USE_SSL} eq "y")
		{
			if ($config{HAS_GNUTLS} eq "y")
			{
				yesno('USE_GNUTLS',"Would you like to enable SSL with m_ssl_gnutls? (recommended)");
				if ($config{USE_GNUTLS} eq "y")
				{
					print "\nUsing GnuTLS SSL module.\n";
				}
			}

			if ($config{HAS_OPENSSL} eq "y")
			{
				yesno('USE_OPENSSL', "Would you like to enable SSL with m_ssl_openssl?");
				if ($config{USE_OPENSSL} eq "y")
				{
					print "\nUsing OpenSSL SSL module.\n";
				}
			}
		}
	}
	else
	{
		print "\nCould not detect OpenSSL or GnuTLS. Make sure pkg-config is installed and\n";
		print "is in your path.\n\n";
	}
}

# We are on a POSIX system, we can enable POSIX extras without asking
symlink "extra/m_regex_posix.cpp", "src/modules/m_regex_posix.cpp";

if (($config{USE_GNUTLS} eq "y") && ($config{HAS_GNUTLS} ne "y"))
{
	print "Sorry, but i couldn't detect gnutls. Make sure gnutls-config is in your path.\n";
	exit 1;
}
if (($config{USE_OPENSSL} eq "y") && ($config{HAS_OPENSSL} ne "y"))
{
	print "Sorry, but i couldn't detect openssl. Make sure openssl is in your path.\n";
	exit 1;
}

$config{CERTGEN} ||= 'y';
yesno('CERTGEN',"Would you like generate SSL certificates now?") if ($interactive && ($config{USE_GNUTLS} eq "y" || $config{USE_OPENSSL} eq "y"));

if ($config{USE_GNUTLS} eq "y") {
	unless (-r "src/modules/m_ssl_gnutls.cpp") {
		print "Symlinking src/modules/m_ssl_gnutls.cpp from extra/\n";
		symlink "extra/m_ssl_gnutls.cpp", "src/modules/m_ssl_gnutls.cpp" or print STDERR "Symlink failed: $!";
	}
	if ($interactive && $config{CERTGEN} eq 'y')
	{
		unless (-r "$config{CONFIG_DIR}/key.pem" && -r "$config{CONFIG_DIR}/cert.pem" && -r "$config{CONFIG_DIR}/dhparams.pem") {
			unless (system './tools/genssl gnutls') {
				print "\nCertificate generation complete, copying to config directory... ";
				File::Copy::move("key.pem", "$config{CONFIG_DIR}/key.pem") or print STDERR "Could not copy key.pem!\n";
				File::Copy::move("cert.pem", "$config{CONFIG_DIR}/cert.pem") or print STDERR "Could not copy cert.pem!\n";
				File::Copy::move("dhparams.pem", "$config{CONFIG_DIR}/dhparams.pem") or print STDERR "Could not copy dhparams.pem!\n";
				print "Done.\n\n";
			}
		}
		else {
			print "SSL Certificates found, skipping.\n\n";
		}
	}
	else
	{
		print "Skipping SSL certificate generation\nin non-interactive mode.\n\n";
	}
}

if ($config{USE_OPENSSL} eq "y") {
	unless (-r "src/modules/m_ssl_openssl.cpp") {
		print "Symlinking src/modules/m_ssl_openssl.cpp from extra/\n";
		symlink "extra/m_ssl_openssl.cpp", "src/modules/m_ssl_openssl.cpp" or print STDERR "Symlink failed: $!";
	}
	if ($interactive && $config{CERTGEN} eq 'y')
	{
		unless (-r "$config{CONFIG_DIR}/key.pem" && -r "$config{CONFIG_DIR}/cert.pem" && -r "$config{CONFIG_DIR}/dhparams.pem") {
			unless (system './tools/genssl openssl') {
				print "\nCertificate generation complete, copying to config directory... ";
				File::Copy::move("key.pem", "$config{CONFIG_DIR}/key.pem") or print STDERR "Could not copy key.pem!\n";
				File::Copy::move("cert.pem", "$config{CONFIG_DIR}/cert.pem") or print STDERR "Could not copy cert.pem!\n";
				File::Copy::move("dhparams.pem", "$config{CONFIG_DIR}/dhparams.pem") or print STDERR "Could not copy dhparams.pem!\n";
				print "Done.\n\n";
			}
		} else {
			print "SSL Certificates found, skipping.\n\n"
		}
	}
	else
	{
		print "Skipping SSL certificate generation\nin non-interactive mode.\n\n";
	}
}
if (($config{USE_GNUTLS} eq "n") && ($config{USE_OPENSSL} eq "n")) {
	print "Skipping SSL Certificate generation, SSL support is not available.\n\n";
}

depcheck();
writefiles();
makecache();
dumphash();

print "\n";
print "To build your server with these settings, please run '\e[1;32mmake\e[0m' now.\n";
if (($config{USE_GNUTLS} eq "y") || ($config{USE_OPENSSL} eq "y")) {
	print "Please note: for \e[1;32mSSL support\e[0m you will need to load required\n";
	print "modules in your config. This configure script has added those modules to the\n";
	print "build process. For more info please refer to:\n";
	print "\e[1;32mhttp://wiki.inspircd.org/Installation_From_Tarball\e[0m\n";
}
print "*** \e[1;32mRemember to edit your configuration files!!!\e[0m ***\n\n";

sub getcache {
	# Retrieves the .config.cache file, and loads values into the main config hash.
	open(CACHE, ".config.cache") or return 0;
	while (<CACHE>) {
		chomp;
		# Ignore Blank lines, and comments..
		next if /^\s*$/;
		next if /^\s*#/;
		my ($key, $value) = split("=", $_, 2);
		$value =~ /^\"(.*)\"$/;
		# Do something with data here!
		$config{$key} = $1;
	}
	close(CACHE);
	return 1;
}

sub makecache {
	# Dump the contents of %config
	print "Writing \e[1;32mcache file\e[0m for future ./configures ...\n";
	open(FILEHANDLE, ">.config.cache");
	foreach my $key (keys %config) {
		print FILEHANDLE "$key=\"$config{$key}\"\n";
	}
	close(FILEHANDLE);
}

sub dir_check {
	my ($desc, $hash_key) = @_;
	my $complete = 0;
	while (!$complete) {
		print "In what directory $desc?\n";
		print "[\e[1;32m$config{$hash_key}\e[0m] -> ";
		chomp(my $var = <STDIN>);
		if ($var eq "") {
			$var = $config{$hash_key};
		}
		if ($var =~ /^\~\/(.+)$/) {
			# Convert it to a full path..
			$var = rel2abs($ENV{HOME} . "/" . $1);
		}
		$var = rel2abs($var);
		if (! -e $var) {
			print "$var does not exist. Create it?\n[\e[1;32my\e[0m] ";
			chomp(my $tmp = <STDIN>);
			if (($tmp eq "") || ($tmp =~ /^y/i)) {
				# Attempt to Create the Dir..
				my $chk = eval {
					use File::Path ();
					File::Path::mkpath($var, 0, 0777);
					1;
				};
				unless (defined($chk) && -d $var) {
					print "Unable to create directory. ($var)\n\n";
					# Restart Loop..
					next;
				}
			} else {
				# They said they don't want to create, and we can't install there.
				print "\n\n";
				next;
			}
		} else {
			if (! -d $var) {
				# Target exists, but is not a directory.
				print "File $var exists, but is not a directory.\n\n";
				next;
			}
		}
		# Either Dir Exists, or was created fine.
		$config{$hash_key} = $var;
		$complete = 1;
		print "\n";
	}
}

sub writefiles {
	chomp(my $incos = `uname -n -s -r`);
	chomp(my $version = `sh src/version.sh`);
	my $revision = getrevision();
	my $branch = "InspIRCd-0.0";
	if ($version =~ /^(InspIRCd-[0-9]+\.[0-9]+)\.[0-9]+/)
	{
		$branch = $1;
	}
	print "Writing \e[1;32mconfig.h\e[0m\n";
	open(FILEHANDLE, ">include/config.h.tmp");
	print FILEHANDLE <<EOF;
/* Auto generated by configure, do not modify! */
#pragma once

#define BRANCH "$branch"
#define VERSION "$version"
#define REVISION "$revision"
#define SYSTEM "$incos"

#define CONFIG_PATH "$config{CONFIG_DIR}"
#define DATA_PATH "$config{DATA_DIR}"
#define LOG_PATH "$config{LOG_DIR}"
#define MOD_PATH "$config{MODULE_DIR}"

EOF

	if ($config{HAS_EVENTFD} eq 'true') {
		print FILEHANDLE "#define HAS_EVENTFD\n";
	}
	if ($config{HAS_CLOCK_GETTIME} eq 'true') {
		print FILEHANDLE "#define HAS_CLOCK_GETTIME\n";
	}

	print FILEHANDLE "\n#include \"threadengines/threadengine_pthread.h\"\n";
	close(FILEHANDLE);

	unlink 'include/config.h';
	rename 'include/config.h.tmp', 'include/config.h';

	# Do this once here, and cache it in the .*.inc files,
	# rather than attempting to read src/version.sh from
	# compiled code -- we might not have the source to hand.

	my @dotfiles = qw(main.mk inspircd);
	push @dotfiles, 'org.inspircd.plist' if $^O eq 'darwin';

	foreach my $file (@dotfiles) {
		open(FILEHANDLE, "make/template/$file") or die "Can't open make/template/$file: $!";
		$_ = join '', <FILEHANDLE>;
		close(FILEHANDLE);

		$config{BUILD_DIR} ||= rel2abs($topdir."/build");
		$config{COMPILER} = lc $cxx{NAME};
		$config{SYSTEM} = lc $^O;

		for my $var (qw(
			CXX COMPILER SYSTEM BASE_DIR CONFIG_DIR MODULE_DIR BINARY_DIR BUILD_DIR DATA_DIR UID
			STARTSCRIPT SOCKETENGINE
		)) {
			s/\@$var\@/$config{$var}/g;
		}

		s/\@VERSION\@/$version/ if defined $version;

		if ($file eq 'main.mk') {
			print "Writing \e[1;32mGNUmakefile\e[0m ...\n";

			my $mk_tmp = $_;
			s/\@IFDEF (\S+)/ifdef $1/g;
			s/\@IFNDEF (\S+)/ifndef $1/g;
			s/\@IFEQ (\S+) (\S+)/ifeq ($1,$2)/g;
			s/\@IFNEQ (\S+) (\S+)/ifneq ($1,$2)/g;
			s/\@ELSIFEQ (\S+) (\S+)/else ifeq ($1,$2)/g;
			s/\@ELSE/else/g;
			s/\@ENDIF/endif/g;
			s/ *\@BSD_ONLY .*\n//g;
			s/\@GNU_ONLY //g;
			s/\@DO_EXPORT (.*)/export $1/g;
			open MKF, '>GNUmakefile' or die "Can't write to GNUmakefile: $!";
			print MKF $_;
			close MKF;

			print "Writing \e[1;32mBSDmakefile\e[0m ...\n";
			$_ = $mk_tmp;
			s/\@IFDEF (\S+)/.if defined($1)/g;
			s/\@IFNDEF (\S+)/.if !defined($1)/g;
			s/\@IFEQ (\S+) (\S+)/.if $1 == $2/g;
			s/\@IFNEQ (\S+) (\S+)/.if $1 != $2/g;
			s/\@ELSIFEQ (\S+) (\S+)/.elif $1 == $2/g;
			s/\@ELSE/.else/g;
			s/\@ENDIF/.endif/g;
			s/\@BSD_ONLY //g;
			s/ *\@GNU_ONLY .*\n//g;
			$mk_tmp = $_;
			$mk_tmp =~ s#\@DO_EXPORT (.*)#"MAKEENV += ".join ' ', map "$_='\${$_}'", split /\s/, $1#eg;
			open MKF, '>BSDmakefile' or die "Can't write to BSDmakefile: $!";
			print MKF $mk_tmp;
			close MKF;
		} else {
			print "Writing \e[1;32m$file\e[0m ...\n";
			open(FILEHANDLE, ">$file") or die("Can't write to $file: $!\n");
			print FILEHANDLE $_;
			close(FILEHANDLE);
		}
	}

	chmod 0755, 'inspircd';
}

sub depcheck
{
	getmodules();
	for my $mod (@modlist) {
		getcompilerflags("src/modules/m_$mod.cpp");
		getlinkerflags("src/modules/m_$mod.cpp");
	}
}

# Routine to list out the extra/ modules that have been enabled.
# Note: when getting any filenames out and comparing, it's important to lc it if the
# file system is not case-sensitive (== Epoc, MacOS, OS/2 (incl DOS/DJGPP), VMS, Win32
# (incl NetWare, Symbian)). Cygwin may or may not be case-sensitive, depending on
# configuration, however, File::Spec does not currently tell us (it assumes Unix behavior).
sub list_extras () {
	use File::Spec;
	# @_ not used
	my $srcdir = File::Spec->catdir("src", "modules");
	my $abs_srcdir = File::Spec->rel2abs($srcdir);
	local $_;
	my $dd;
	opendir $dd, File::Spec->catdir($abs_srcdir, "extra") or die (File::Spec->catdir($abs_srcdir, "extra") . ": $!\n");
	my @extras = map { File::Spec->case_tolerant() ? lc($_) : $_ } (readdir($dd));
	closedir $dd;
	undef $dd;
	opendir $dd, $abs_srcdir or die "$abs_srcdir: $!\n";
	my @sources = map { File::Spec->case_tolerant() ? lc($_) : $_ } (readdir($dd));
	closedir $dd;
	undef $dd;
	my $maxlen = (sort { $b <=> $a } (map {length($_)} (@extras)))[0];
	my %extras = ();
EXTRA:	for my $extra (@extras) {
		next if (File::Spec->curdir() eq $extra || File::Spec->updir() eq $extra);
		my $abs_extra = File::Spec->catfile($abs_srcdir, "extra", $extra);
		my $abs_source = File::Spec->catfile($abs_srcdir, $extra);
		next unless ($extra =~ m/\.(cpp|h)$/ || (-d $abs_extra)); # C++ Source/Header, or directory
		if (-l $abs_source) {
			# Symlink, is it in the right place?
			my $targ = readlink($abs_source);
			my $abs_targ = File::Spec->rel2abs($targ, $abs_srcdir);
			if ($abs_targ eq $abs_extra) {
				$extras{$extra} = "\e[32;1menabled\e[0m";
			} else {
				$extras{$extra} = sprintf("\e[31;1mwrong symlink target (%s)\e[0m", $abs_targ);
			}
		} elsif (-e $abs_source) {
			my ($devext, $inoext) = stat($abs_extra);
			my ($devsrc, $inosrc, undef, $lnksrc) = stat($abs_source);
			if ($lnksrc > 1) {
				if ($devsrc == $devext && $inosrc == $inoext) {
					$extras{$extra} = "\e[32;1menabled\e[0m";
				} else {
					$extras{$extra} = sprintf("\e[31;1mwrong hardlink target (%d:%d)\e[0m", $devsrc, $inosrc);
				}
			} else {
				open my $extfd, "<", $abs_extra;
				open my $srcfd, "<", $abs_source;
				local $/ = undef;
				if (scalar(<$extfd>) eq scalar(<$srcfd>)) {
					$extras{$extra} = "\e[32;1menabled\e[0m";
				} else {
					$extras{$extra} = sprintf("\e[31;1mout of synch (re-copy)\e[0m");
				}
			}
		} else {
			$extras{$extra} = "\e[33;1mdisabled\e[0m";
		}
	}
	# Now let's add dependency info
	for my $extra (keys(%extras)) {
		next unless $extras{$extra} =~ m/enabled/; # only process enabled extras.
		my $abs_extra = File::Spec->catfile($abs_srcdir, "extra", $extra);
		my @deps = split / +/, getdependencies($abs_extra);
		for my $dep (@deps) {
			if (exists($extras{$dep})) {
				my $ref = \$extras{$dep}; # Take reference.
				if ($$ref !~ m/needed by/) {
					# First dependency found.
					if ($$ref =~ m/enabled/) {
						$$ref .= " (needed by \e[32;1m$extra\e[0m";
					} else {
						$$ref =~ s/\e\[.*?m//g; # Strip out previous coloring. Will be set in bold+red+blink later.
						$$ref .= " (needed by \e[0;32;1;5m$extra\e[0;31;1;5m";
					}
				} else {
					if ($$ref =~ m/enabled/) {
						$$ref .= ", \e[32;1m$extra\e[0m";
					} else {
						$$ref .= ", \e[0;32;1;5m$extra\e[0;31;1;5m";
					}
				}
			}
		}
	}
	for my $extra (sort {$a cmp $b} keys(%extras)) {
		my $text = $extras{$extra};
		if ($text =~ m/needed by/ && $text !~ m/enabled/) {
			printf "\e[31;1;5m%-*s = %s%s\e[0m\n", $maxlen, $extra, $text, ($text =~ m/needed by/ ? ")" : "");
		} else {
			printf "%-*s = %s%s\n", $maxlen, $extra, $text, ($text =~ m/needed by/ ? "\e[0m)" : "");
		}
	}
	return keys(%extras) if wantarray; # Can be used by manage_extras.
}

sub enable_extras (@) {
	my (@extras) = @_;
	for my $extra (@extras) {
		my $extrapath = "src/modules/extra/$extra";
		if (!-e $extrapath) {
			print STDERR "Cannot enable \e[32;1m$extra\e[0m : No such file or directory in src/modules/extra\n";
			next;
		}
		my $source = "src/modules/$extra";
		if (-e $source) {
			print STDERR "Cannot enable \e[32;1m$extra\e[0m : destination in src/modules exists (might already be enabled?)\n";
			next;
		}
		# Get dependencies, and add them to be processed.
		my @deps = split / +/, getdependencies($extrapath);
		for my $dep (@deps) {
			next if scalar(grep { $_ eq $dep } (@extras)) > 0; # Skip if we're going to be enabling it anyway.
			if (!-e "src/modules/$dep" && !-e "include/$dep") {
				if (-e "src/modules/extra/$dep") {
					print STDERR "Will also enable extra \e[32;1m$dep\e[0m (needed by \e[32;1m$extra\e[0m)\n";
					push @extras, $dep;
				} else {
					print STDERR "\e[33;1mWARNING:\e[0m module \e[32;1m$extra\e[0m might be missing dependency \e[32;1m$dep\e[0m - YOU are responsible for satisfying it!\n";
				}
			}
		}
		print "Enabling $extra ... \n";
		symlink "extra/$extra", $source or print STDERR "$source: Cannot link to 'extra/$extra': $!\n";
	}
}

sub disable_extras (@)
{
	opendir my $dd, "src/modules/extra/";
	my @files = readdir($dd);
	closedir $dd;
	my (@extras) = @_;
EXTRA:	for my $extra (@extras) {
		my $extrapath = "src/modules/extra/$extra";
		my $source = "src/modules/$extra";
		if (!-e $extrapath) {
			print STDERR "Cannot disable \e[32;1m$extra\e[0m : Is not an extra\n";
			next;
		}
		if ((! -l $source) || readlink($source) ne "extra/$extra") {
			print STDERR "Cannot disable \e[32;1m$extra\e[0m : Source is not a link or doesn't refer to the right file. Remove manually if this is in error.\n";
			next;
		}
		# Check if anything needs this.
		for my $file (@files) {
			my @deps = split / +/, getdependencies("src/modules/extra/$file");
			# File depends on this extra...
			if (scalar(grep { $_ eq $extra } @deps) > 0) {
				# And is both enabled and not about to be disabled.
				if (-e "src/modules/$file" && scalar(grep { $_ eq $file } @extras) < 1) {
					print STDERR "Cannot disable \e[32;1m$extra\e[0m : is needed by \e[32;1m$file\e[0m\n";
					next EXTRA;
				}
			}
		}
		# Now remove.
		print "Disabling $extra ... \n";
		unlink "src/modules/$extra" or print STDERR "Cannot disable \e[32;1m$extra\e[0m : $!\n";
	}
}

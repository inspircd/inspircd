#-#-#-#-#-#-#-#-#-#-#-#-#-  MODULE OPTIONS   -#-#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
#  These tags define which modules will be loaded on startup by your  #
#  server. Add modules without any paths. When you make your ircd     #
#  using the 'make' command, all compiled modules will be moved into  #
#  the folder you specified when you ran ./configure. The module tag  #
#  automatically looks for modules in this location.                  #
#  If you attempt to load a module outside of this location, either   #
#  in the config, or via /LOADMODULE, you will receive an error.      #
#                                                                     #
#  By default, ALL modules are commented out. You must uncomment them #
#  or add lines to your config to load modules. Please refer to       #
#  http://wiki.inspircd.org/Modules for a list of modules and         #
#  each modules link for any additional conf tags they require.       #
#                                                                     #
#    ____                _   _____ _     _       ____  _ _   _        #
#   |  _ \ ___  __ _  __| | |_   _| |__ (_)___  | __ )(_) |_| |       #
#   | |_) / _ \/ _` |/ _` |   | | | '_ \| / __| |  _ \| | __| |       #
#   |  _ <  __/ (_| | (_| |   | | | | | | \__ \ | |_) | | |_|_|       #
#   |_| \_\___|\__,_|\__,_|   |_| |_| |_|_|___/ |____/|_|\__(_)       #
#                                                                     #
# To link servers to InspIRCd, you MUST load the m_spanningtree       #
# module. If you don't do this, server links will NOT work at all.    #
# This is by design, to allow for the implementation of other linking #
# protocols in modules in the future.                                 #
#                                                                     #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# MD5 Module - Allows other modules to generate MD5 hashes, usually for
# cryptographic uses and security.
#
# IMPORTANT:
# Other modules such as m_cloaking.so and m_password_hash.so may rely on
# this module being loaded to function.
#
#<module name="m_md5.so">
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SHA256 Module - Allows other modules to generate SHA256 hashes,
# usually for cryptographic uses and security.
#
# IMPORTANT:
# Other modules such as m_password_hash.so may rely on this module being
# loaded to function. Certain modules such as m_spanningtree.so will
# function without this module but when it is loaded their features will
# be enhanced (for example the addition of HMAC authentication).
#
#<module name="m_sha256.so">
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# RIPEMD160 Module - Allows other modules to generate RIPEMD160 hashes,
# usually for cryptographic uses and security.
# 
# IMPORTANT:
# Other modules may rely on this module being loaded to function.
#<module name="m_ripemd160.so">
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# POSIX crypt() Module - Allows passwords to be stored using the POSIX
# crypt() function.
#
#<module name="m_hash_posix.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Abbreviation module: Provides the ability to abbreviate commands a-la 
# BBC BASIC keywords.
#<module name="m_abbreviation.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Alias module: see examples in docs/aliases
#<module name="m_alias.so">
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Allowinvite module: Gives channel mode +A to allow all users to use
# /invite, and extban A to deny invite from specific masks
#<module name="m_allowinvite.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Alltime module: Shows time on all connected servers at once.
# This module is oper-only and provides /alltime.
# To use, ALLTIME must be in one of your oper class blocks.
#<module name="m_alltime.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Auditorium module: Adds channel mode +u which makes everyone else
# except you in the channel invisible, used for large meetings etc.
#<module name="m_auditorium.so">
#
# Auditorium settings:
#
#<auditorium opvisible="no" opcansee="no" opercansee="yes">
#
# opvisible (auditorium-vis in exemptchanops):
#   Show channel ops to all users
# opcansee (auditorium-see in exemptchanops):
#   Allow ops to see all joins/parts/kicks in the channel
# opercansee:
#   Allow opers (channels/auspex) to see see all joins/parts/kicks in the channel
#
# Exemptchanops can be used to adjust the level at which users become visible or
# the level at which they can see the full membe list of the channel.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Autoop module: Adds basic channel access controls via the +w listmode.
# For example, +w o:R:Brain will op anyone identified to the account "Brain"
# on join.
#<module name="m_autoop.so">
#
# Autoop settings:
#
#<autoop checkonlogin="yes" checkonhostchange="yes">
#
# checkonlogin:
#   Whether or not to recheck a user against autoop lists automatically
#   when they identify to an account
# checkonhostchange:
#   Whether or not to recheck a user against autoop lists automatically
#   when their host changes

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Ban except module: Adds support for channel ban exceptions (+e)
#<module name="m_banexception.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Ban redirection module: Allows bans which redirect to a specified
# channel. e.g. +b nick!ident@host#channelbanneduserissentto
#<module name="m_banredirect.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Block amsg module: Attempt to block all usage of /amsg and /ame
#<module name="m_blockamsg.so">
#
#-#-#-#-#-#-#-#-#-#-#-  BLOCKAMSG CONFIGURATION  -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# If you have the m_blockamsg.so module loaded, you can configure it  #
# with the <blockamsg> tag:                                           #
#                                                                     #
# delay          -   How many seconds between two messages to force   #
#                    them to be recognised as unrelated.              #
# action         -   Any of 'notice', 'noticeopers', 'silent', 'kill' #
#                    or 'killopers'. Define how to take action when   #
#                    a user uses /amsg or /ame.                       #
#
#<blockamsg delay="3" action="killopers">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Block CAPS module: Blocking all-CAPS messages with cmode +B
#<module name="m_blockcaps.so">
#                                                                     #
#-#-#-#-#-#-#-#-#-#-#-  BLOCKCAPS CONFIGURATION  -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# percent        - How many percent of text must be caps before text  #
#                  will be blocked.                                   #
#                                                                     #
# minlen         - The minimum length a line must be for the block    #
#                  percent to have any effect.                        #
#                                                                     #
# capsmap        - A list of chars to be considered CAPS, this was    #
#                  you can add CAPS for your language. Also you can   #
#                  add things like ! and space to further lock down   #
#                  on caps usage.                                     #
#<blockcaps percent="50"
#           minlen="5"
#           capsmap="ABCDEFGHIJKLMNOPQRSTUVWXYZ! ">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Block color module: Blocking color-coded messages with cmode +c
#<module name="m_blockcolor.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Botmode module: Adds the user mode +B
#<module name="m_botmode.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# CallerID module: Adds usermode +g which activates hybrid-style 
# callerid (== block all private messages unless you /accept first)
#<module name="m_callerid.so">
# 
#-#-#-#-#-#-#-#-#-#-#- CALLERID  CONFIGURATION -#-#-#-#-#-#-#-#-#-#-#-#
# maxaccepts     - Maximum number of entires a user can add to his    #
#                  /accept list. Default is 16 entries.               #
# operoverride   - Can opers (note: ALL opers) ignore callerid mode?  #
#                  Default is no.                                     #
# tracknick      - Preserve /accept entries when a user changes nick? #
#                  If no (the default), the user is removed from      #
#                  everyone's accept list if he changes nickname.     #
# cooldown       - Amount of time (in seconds) that must pass since   #
#                  the last notification sent to a user before he can #
#                  be sent another. Default is 60 (1 minute).         #
#<callerid maxaccepts="16"
#          operoverride="no"
#          tracknick="no"
#          cooldown="60">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# CAP module: Provides the CAP negotiation mechanism seen in
# ratbox-derived ircds
#<module name="m_cap.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# CBAN module: Lets you disallow channels from being used at runtime.
# This module is oper-only and provides /cban.
# To use, CBAN must be in one of your oper class blocks.
#<module name="m_cban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Censor module: Adds the channel mode +G
#<module name="m_censor.so">
#
#-#-#-#-#-#-#-#-#-#-#-  CENSOR  CONFIGURATION  -#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# Optional - If you specify to use the m_censor module, then you must #
# specify some censor tags. See also:                                 #
# http://wiki.inspircd.org/Modules/censor                             #
#
#<include file="conf/censor.conf">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# CGI:IRC module: Adds support for automatic host changing in CGI:IRC
# (http://cgiirc.sourceforge.net).
#<module name="m_cgiirc.so">
#
#-#-#-#-#-#-#-#-#-#-#-# CGIIRC  CONFIGURATION #-#-#-#-#-#-#-#-#-#-#-#-#
#
# Optional - If you specify to use m_cgiirc, then you must specify one
# or more cgihost tags which indicate authorised CGI:IRC servers which
# will be connecting to your network, and an optional cgiirc tag.
# For more information see: http://wiki.inspircd.org/Modules/cgiirc
#
# Set to yes if you want to notice opers when CGI clients connect
# <cgiirc opernotice="no">
#
# The type field indicates where the module should get the real
# client's IP address from, for further information, please see the
# CGI:IRC documentation.
#
# Old style:
# <cgihost type="pass" mask="www.mysite.com">       # Get IP from PASS
# <cgihost type="ident" mask="otherbox.mysite.com"> # Get IP from ident
# <cgihost type="passfirst" mask="www.mysite.com">  # See the docs
# New style:
# <cgihost type="webirc" password="foobar"
#   mask="somebox.mysite.com">                      # Get IP from WEBIRC
#
# IMPORTANT NOTE:
# ---------------
#
# When you connect CGI:IRC clients, there are two connect classes which
# apply to these clients. When the client initially connects, the connect
# class which matches the cgi:irc site's host is checked. Therefore you
# must raise the maximum local/global clients for this ip as high as you
# want to allow cgi clients. After the client has connected and is
# determined to be a cgi:irc client, the class which matches the client's
# real IP is then checked. You may set this class to a lower value, so that
# the real IP of the client can still be restricted to, for example, 3
# sessions maximum.
#

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Channel create module: Adds snomask +j, which will notify opers of
# any new channels that are created.
# This module is oper-only.
#<module name="m_chancreate.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Join / Part server notice mask module: Adds snomasks +e and +p
# Snomask +e will notify opers when users join channels.
# Snomask +p will notify opers when users part channels.
# This module is oper-only.
#<module name="m_joinpartsno.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Channel filter module: Allows channel-op defined message
# filtering using simple string matches (channel mode +g)
#<module name="m_chanfilter.so">
#
# If hidemask is set to yes, the user will not be shown the mask when
# his/her message is blocked.
#<chanfilter hidemask="yes">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Channel History module: Displays the last 'X' lines of chat to a user
# joining a channel with +H 'X:T' set; 'T' is the maximum time to keep
# lines in the history buffer. Designed so that the new user knows what
# the current topic of conversation is when joining the channel.
# NOTE: Currently hard-limited to a maximum of 50 lines.
#<module name="m_chanhistory.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Channel logging module: used to send snotice output to channels, to
# allow staff to centrally monitor and discuss network activity.
#
# The "channel" field is where you want the messages to go, "snomasks"
# is what snomasks you want to be sent to that channel. Multiple tags
# are allowed.
#<module name="m_chanlog.so">
#<chanlog snomasks="AOcC" channel="#opers">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Channel Names module: Allows disabling channels which have certain
# characters in the channel name such as bold, colorcodes, etc which
# can be quite annoying and allow users to on occasion have a channel
# that looks like the name of another channel on the network.
#<module name="m_channames.so">

#<channames
	# denyrange: characters or range of characters to deny in channel
	# names.
	#denyrange="2,3"

	# allowrange: characters or range of characters to specifically allow
	# in channel names.
	#allowrange="">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Channelban: Implements extended ban j:, which stops anyone in already
# in a channel matching a mask like +b j:#channel*mask from joining,
# although joining the channel with the banmask and then the banned
# channel is still possible.
#<module name="m_channelban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Chanprotect module: gives +q and +a channel modes
# Note that m_customprefix provides a more customizable version of this.
#<module name="m_chanprotect.so">

#<chanprotect
	# qprefix: Prefix (symbol) to use for +q users.
	#qprefix="~"

	# aprefix: Prefix (symbol) to use for +a users.
	#aprefix="&amp;"
	
	# grantadmin/grantfounder: when set to yes, +a users will be able to
	# grant +a on other users (or +q to +q). Founder can always set/unset
	# admin mode.
	#grantadmin="no" grantfounder="yes">


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Check module: gives /check
# Check is useful for looking up information on channels,
# users, IP addresses and hosts.
# This module is oper-only.
# To use, CHECK must be in one of your oper class blocks.
#<module name="m_check.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# CHGHOST module: Adds the /CHGHOST command
# This module is oper-only.
# To use, CHGHOST must be in one of your oper class blocks.
# NOTE: Services will not be able to set vhosts on users if this module
# isn't loaded. If you're planning on running services, you probably
# want to load this.
#<module name="m_chghost.so">
#
#-#-#-#-#-#-#-#-# /CHGHOST - /SETHOST  CONFIGURATION #-#-#-#-#-#-#-#-#
# Optional - If you want to use special chars for hostnames you can  #
# specify your own custom list of chars with the <hostname> tag:     #
#                                                                    #
# charmap        - A list of chars accepted as valid by the /CHGHOST #
#                  and /SETHOST commands. Also note that the list is # 
#                  case-sensitive.                                   #
#<hostname charmap="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_/0123456789">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# CHGIDENT module: Adds the /CHGIDENT command
# This module is oper-only.
# To use, CHGIDENT must be in one of your oper class blocks.
#<module name="m_chgident.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# CHGNAME module: Adds the /CHGNAME command
# This module is oper-only.
# To use, CHGNAME must be in one of your oper class blocks.
#<module name="m_chgname.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Clear module: Adds the /CLEAR command
#<module name="m_clear.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# CLINE module: Adds the /CLINE command
# This module is oper-only.
# To use, CLINE must be in one of your oper class blocks.
# Users matching a CLINE are assigned to the connect class it
# specifies.
#<module name="m_cline.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Cloaking module: Adds usermode +x and cloaking support.
# Relies on the module m_md5.so being loaded before m_cloaking.so in
# the configuration file.
# To use, you should enable m_conn_umodes and add +x as
# an enabled mode. See the m_conn_umodes module for more information.
#<module name="m_cloaking.so">
#
#-#-#-#-#-#-#-#-#-#-#- CLOAKING  CONFIGURATION -#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# If you specify the m_cloaking.so module as above, you must define   #
# cloak keys, and optionally a cloak prefix as shown below. The cloak #
# keys must be shared across the network for correct cloaking.        #
#                                                                     #
# There are four methods of cloaking:                                 #
#                                                                     #
#   half           Cloak only the "unique" portion of a host; show    #
#                  the last 2 parts of the domain, /16 subnet of IPv4 #
#                  or /48 subnet of the IPv6 address.                 #
#                                                                     #
#   full           Cloak the users completely, using three slices for #
#                  common CIDR bans (IPv4: /16, /24; IPv6: /48, /64)  #
#                                                                     #
# These methods use a single key that can be any length of text.      #
# An optional prefix may be specified to mark cloaked hosts.          #
#                                                                     #
# The following methods are maintained for backwards compatibility;   #
# they are slightly less secure, and always hide unresolved IPs       #
#                                                                     #
#   compat-host    InspIRCd 1.2-compatible host-based cloaking        #
#   compat-ip      InspIRCd 1.2-compatible ip-always cloaking         #
#                                                                     #
# You must specify key1, key2, key3, key4 for the compat cloaking     #
# modes; the values must be less than 0x80000000 and should be picked #
# at random. Prefix is mandatory, will default to network name if not #
# specified, and will always have a "-" appended.                     #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#
#<cloak mode="half"
#       key="secret"
#       prefix="net-">

#-#-#-#-#-#-#-#-#-#-#-#- CLOSE MODULE #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Close module: Allows an oper to close all unregistered connections.
# This module is oper-only and provides /close.
# To use, CLOSE must be in one of your oper class blocks.
#<module name="m_close.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Clones module: Adds an oper command /CLONES for detecting cloned
# users. Warning: This module may be resource intensive when its
# command is issued, use with care.
# This module is oper-only.
# To use, CLONES must be in one of your oper class blocks.
#<module name="m_clones.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Common channels module: Adds user mode +c, which, when set, requires
# that users must share a common channel with you to PRIVMSG or NOTICE
# you unless they are an IRC operator.
#<module name="m_commonchans.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Conn-Join: Allows you to auto-join users to one or more channels
# automatically upon connecting to the server.
#<module name="m_conn_join.so">
#
#-#-#-#-#-#-#-#-#-#-#-#- CONNJOIN CONFIGURATION  -#-#-#-#-#-#-#-#-#-#-#
#
# If you have m_conn_join.so loaded, you can configure it using the
# follow values:
#
#<autojoin channel="#one,#two,#three">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Conn-Usermodes: Set modes on users when they connect
# When this module is loaded <connect:allow> tags may have an optional
# modes="" value, which contains modes to add or remove from users
# when they connect to the server.
#<module name="m_conn_umodes.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Conn-Wait-for-Pong: Don't let a user connect until they PONG
#<module name="m_conn_waitpong.so">
#
#-#-#-#-#-#-#-#-#-#-#-   WAITPONG CONFIGURATION  -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# If you have the m_conn_waitpong.so module loaded, configure it with #
# the <waitpong> tag:                                                 #
#                                                                     #
# sendsnotice    -   Whether to send a snotice on connect, like other #
#                    older ircds                                      #
#                                                                     #
# killonbadreply -   Whether to kill the user if they send the wrong  #
#                    PONG reply.                                      #
#                                                                     #
#<waitpong sendsnotice="yes" killonbadreply="yes">


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Channel cycle module. Server side /hop, with +ilk etc bypass.
#<module name="m_cycle.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Connectban: Provides IP connection throttling. Any IP range that connects
# too many times (configurable) in an hour is zlined for a (configurable)
# duration, and their count resets to 0.
#
# ipv4cidr and ipv6cidr allow you to turn the comparison from individual
# IP addresses (32 and 128 bits) into CIDR masks, to allow for throttling
# over whole ISPs/blocks of IPs, which may be needed to prevent attacks.
#
#<connectban threshold="10" duration="10m" ipv4cidr="32" ipv6cidr="128">
# This allows for 10 connections in an hour with a 10 minute ban if that is exceeded.
#
#<module name="m_connectban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Connection throttle module. Configuration:
#<module name="m_connflood.so">
#
#-#-#-#-#-#-#-#-#-#-#- CONTHROTTLE CONFIGURATION -#-#-#-#-#-#-#-#-#-#-#
#  seconds, maxconns -  Amount of connections per <seconds>.
#
#  timeout           -  Time to wait after the throttle was activated
#                       before deactivating it. Be aware that the time
#                       is seconds + timeout.
#
#  quitmsg           -  The message that users get if they attempt to
#                       connect while the throttle is active.
#
#  bootwait          -  Amount of time to wait before enforcing the
#                       throttling when the server just booted.
#
#<connflood seconds="30" maxconns="3" timeout="30"
#   quitmsg="Throttled" bootwait="10">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Custom prefixes : allows for channel prefixes to be added. 
# This can replace m_chanprotect and m_halfop, except for services that
# recognise those modules by name
#<module name="m_customprefix.so">
#
# name       The name of the mode, must be unique from other modes
# letter     The letter used for this mode. Required.
# prefix     The prefix used for nicks with this mode. Not required.
# rank       A numeric rank for this prefix, defining what permissions it gives
#            VOICE_VALUE is 10000, HALFOP_VALUE is 20000, OP_VALUE is 30000
# ranktoset  The numeric rank required to set/unset this mode. Defaults to rank.
#            This is also the rank required to kick people having this mode.
# depriv     False if you cannot remove the mode from yourself
#
#m_chanprotect in 2.0, by default, defines:
#  <customprefix name="founder" letter="q" prefix="~" rank="50000" ranktoset="50000">
#  <customprefix name="admin" letter="a" prefix="&amp;" rank="40000" ranktoset="50000">
#m_halfop is just:
#  <customprefix name="halfop" letter="h" prefix="%" rank="20000" ranktoset="30000">
#
#Another useful configuration:
#  <customprefix name="owner" letter="q" prefix="~" rank="50000" ranktoset="50000">
#  <customprefix name="protected" letter="a" prefix="" rank="10010" ranktoset="50000">
#This allows +a to act like +v and also protect the user from kicks by ops/halfops.
#
#A useless "vanity" rank:
#  <customprefix name="halfvoice" letter="V" prefix="-" rank="2" ranktoset="20000">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Channel ACL module: Adds cmode +W, which allows fine-grained control
# over channel permissions.
#<module name="m_chanacl.so">
#-#-#-#-#-#-#-#-#-#-#-#- CHANACL CONFIGURATION -#-#-#-#-#-#-#-#-#-#-#-#
# moderequired - The default mode needed to use the chanacl mode.
#<chanacl moderequired="founder">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Custom title module: Adds the /TITLE command which allows for trusted
#                      users to gain a custom whois line and a optional
#                      vhost can be specified.
#<module name="m_customtitle.so">
#
#-#-#-#-#-#-#-#-#-#-  CUSTOM TITLE CONFIGURATION   -#-#-#-#-#-#-#-#-#-#
#  name              - The username used to identify 
#  password          - The password used to identify
#  hash              - The hash for the specific user's password (optional)
#                      m_password_hash.so and a hashing module must be loaded for this to work
#  host              - Allowed hostmask [optional]
#  title             - Title shown in whois
#  vhost             - Displayed host [optional]
#
#<title name="foo" password="bar" title="Official Chat Helper">
#<title name="bar" password="foo" host="ident@host.name" title="Official Chat Helper" vhost="helper.network.chat">
#<title name="foo" password="fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9" hash="sha256" title="Official Chat Helper">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# DCCALLOW module: Adds the /DCCALLOW command
#<module name="m_dccallow.so">
#
#-#-#-#-#-#-#-#-#-#-#-  DCCALLOW CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#
#  blockchat         - Whether to block DCC CHAT as well as DCC SEND
#  length            - Default duration of entries in DCCALLOW list
#  action            - Default action to take if no action is specified
#                      can be 'block' or 'allow'
#
# File configuration:
#  pattern           - The glob pattern to match against
#  action            - Action to take if a user attempts to send a file
#                      that matches this pattern, can be 'block' or 'allow'
#
#<dccallow blockchat="yes" length="5m" action="block">
#<banfile pattern="*.exe" action="block">
#<banfile pattern="*.txt" action="allow">
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Deaf module: adds support for ircu style usermode +d - deaf to
# channel messages and channel notices.
#<module name="m_deaf.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Delay join module: Adds the channel mode +D which delays all JOIN
# messages from users until they speak. If they quit or part before
# speaking, their quit or part message will not be shown to the channel
# which helps cut down noise on large channels in a more friendly way
# than the auditorium mode. Only channel ops may set the +D mode.
#<module name="m_delayjoin.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Delay message module: Adds the channel mode +d which disallows a user
# from talking in the channel unless they've been joined for X seconds.
# Settable a la: /mode +d 30
#<module name="m_delaymsg.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Deny Channels: Deny Channels from being used by users
#<module name="m_denychans.so"> 
#
#-#-#-#-#-#-#-#-#-#-#-   DENYCHAN DEFINITIONS  -#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# If you have the m_denychans.so module loaded, you need to specify   #
# the channels to deny:                                               #
#                                                                     #
# name        -      The channel name to deny. (glob masks are ok)    #
#                                                                     #
# allowopers  -      If operators are allowed to override the deny.   #
#                                                                     #
# reason      -      Reason given for the deny.                       #
#                                                                     #
# redirect    -      Redirect the user to a different channel         #
#                                                                     #
#<badchan name="#gods*" allowopers="yes" reason="Tortoises!">         #
#<badchan name="#heaven" redirect="#hell" reason="Nice try!">         #
#                                                                     #
# Redirects will not work if the target channel is set +L.            #
#                                                                     #
# Additionally, you may specify channels which are allowed, even if   #
# a badchan tag specifies it would be denied:                         #
#<goodchan name="#godsleeps">                                         #
# Glob masks are accepted here also.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Devoice Module: Let users devoice themselves.
#<module name="m_devoice.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# DNS Blacklist Module: Provides support for looking up IPs on one or #
# more blacklists.                                                    #
#<module name="m_dnsbl.so">                                           #
#                                                                     #
# For configuration options please see the wiki page for m_dnsbl at   #
# http://wiki.inspircd.org/Modules/dnsbl                              #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Exempt Channel Operators Module: Provides support for allowing      #
# channel operators to be exempt from some channel modes.  Supported  #
# modes are blockcaps, noctcp, blockcolor, nickflood, flood, censor,  #
# filter, regmoderated, nonick, nonotice, and stripcolor.             #
#<module name="m_exemptchanops.so">                                   #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Filter module: Provides message filtering, similar to SPAMFILTER.
#<module name="m_filter.so">
#                                                                     #
# This module depends upon a regex provider such as m_regex_pcre or   #
# m_regex_glob to function. You must specify which of these you want  #
# m_filter to use via the tag below.                                  #
#                                                                     #
# Valid engines are:                                                  #
#                                                                     #
# glob  - Glob patterns, provided via m_regex_glob.so                 #
# pcre  - PCRE regexps, provided via m_regex_pcre.so, needs libpcre   #
# tre   - TRE regexps, provided via m_regex_tre.so, requires libtre   #
# posix - POSIX regexps, provided via m_regex_posix.so, not availale  #
#         on windows, no dependencies on other operating systems.     #
#                                                                     #
#<filteropts engine="glob">                                           #
#                                                                     #
# Your choice of regex engine must match on all servers network-wide.
#
# You may specify specific channels that are exempt from being filtered:
#<exemptfromfilter channel="#blah">
#
#-#-#-#-#-#-#-#-#-#-#-  FILTER  CONFIGURATION  -#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# Optional - If you specify to use the m_filter module, then          #
# specfiy below the path to the filter.conf file, or define some      #
# <filter> tags.                                                      #
#                                                                     #
#<include file="conf/filter.conf">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Gecosban: Implements extended ban r:, which stops anyone matching
# a mask like +b r:*realname?here* from joining a channel.
#<module name="m_gecosban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# GeoIP module: Allows the server admin to match users by country code.
# This modules is in extras. Re-run configure with: ./configure --enable-extras=m_geoip.cpp
# and run make install, then uncomment this module to enable it.
# This module requires GeoIP to be installed on your system,
# use your package manager to find the appropriate packages
# or check the InspIRCd wiki page for this module.
#<module name="m_geoip.so">
#
# The actual allow/ban actions are done by connect classes, not by the
# GeoIP module. An example connect class to ban people from russia or
# turkey:
#
# <connect deny="*" geoip="TR,RU">
#
# The country code must be in capitals and should be an ISO country
# code such as TR, GB, or US. Unknown IPs (localhost, LAN IPs, etc)
# will be assigned the country code "UNK". Since connect classes are
# matched from top down, your deny classes must be above your allow
# classes for them to match.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Globops module: gives /GLOBOPS and SNOMASK +g
# This module is oper-only.
# To use, GLOBOPS must be in one of your oper class blocks.
#<module name="m_globops.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Global load module: Allows loading and unloading of modules network-
# wide (USE WITH EXTREME CAUTION!)
# This module is oper-only and provides /gloadmodule, /gunloadmodule
# and /greloadmodule.
# To use, GLOADMODULE, GUNLOADMODULE and GRELOADMODULE
# must be in one of your oper class blocks.
#<module name="m_globalload.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Halfop module: Provides the +h (halfops) channel status mode.
# Note that m_customprefix provides a more customizable version of this.
#<module name="m_halfop.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# HELPOP module: Provides the /HELPOP command
#<module name="m_helpop.so">
#
#-#-#-#-#-#-#-#-#-#-#-#-  HELPOP  CONFIGURATION  -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# Optional - If you specify to use the m_helpop.so module, then       #
# specify below the path to the helpop.conf file, or if you like to   #
# make a mess, define your helpop tags in this conf.                  #
#                                                                     #
#<include file="conf/inspircd.helpop-full.example">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# HIDECHANS module: Allows opers to hide their channels list from non-
# opers by setting user mode +I on themselves.
#<module name="m_hidechans.so">
#
# HIDECHANS can optionally prevent opers from seeing channels on a +I
# user, for more privacy if set to true.
# This setting is not recommended for most mainstream networks.
#<hidechans affectsopers="false">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# HIDEOPER module: Allows opers to hide their oper status from non-
# opers by setting user mode +H on themselves.
# This module is oper-only.
#<module name="m_hideoper.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Hostchange module: Allows a different style of cloaking
#<module name="m_hostchange.so">
#
#-#-#-#-#-#-#-#-#-#-#-  HOSTCHANGE  CONFIGURATION  -#-#-#-#-#-#-#-#-#-#
#                                                                     #
# Optional - If you choose to use the m_hostchange.so module.         #
# Config Help -  See http://wiki.inspircd.org/Modules/hostchange      #
#                                                                     #
#<host suffix="polarbears.org" separator="." prefix="">
#<hostchange mask="*@fbi.gov" action="addnick">
#<hostchange mask="*r00t@*" action="suffix">
#<hostchange mask="a@b.com" action="set" value="blah.blah.blah">
#<hostchange mask="localhost" ports="7000,7001,7005-7007" action="set" value="blahblah.foo">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# httpd module: Provides http server support for InspIRCd
#<module name="m_httpd.so">
#
#-#-#-#-#-#-#-#-#-#-#-#-  HTTPD   CONFIGURATION  -#-#-#-#-#-#-#-#-#-#-#
#
# If you choose to use the m_httpd.so module, then you will need to add
# a <bind> tag with type "httpd", and load at least one of the other
# m_httpd_* modules to provide pages to display.
#

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# http ACL module: Provides access control lists for m_httpd dependent
# modules. Use this module to restrict pages by IP address and by
# password.
#
#<module name="m_httpd_acl.so">
#
#-#-#-#-#-#-#-#-#-#-#-#- HTTPD ACL CONFIGURATION -#-#-#-#-#-#-#-#-#-#-#
#
# Restrict access to the m_httpd_stats module to all but the local
# network and when the correct password is specified:
#
# <httpdacl path="/stats*" types="password,whitelist"
#    username="secretstuff" password="mypasshere" whitelist="127.0.0.*,10.*">
# 
# Deny all connections to all but the main index page:
#
# <httpdacl path="/*" types="blacklist" blacklist="*">
#

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# http config module: Allows the server's configuration to be viewed
# over HTTP. Requires m_httpd.so to be loaded for it to function.
#<module name="m_httpd_config.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# http stats module: Provides basic stats pages over HTTP
# Requires m_httpd.so to be loaded for it to function.
#<module name="m_httpd_stats.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Ident: Provides RFC 1413 ident lookup support
# When this module is loaded <connect:allow> tags may have an optional
# useident="yes|no" boolean value, determining whether or not to lookup
# ident on users matching that connect tag.
#<module name="m_ident.so">
#
#-#-#-#-#-#-#-#-#-#-#-#-   IDENT CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# Optional - If you are using the m_ident.so module, then you can     #
# specify the timeout for ident lookups here. If not defined, it will #
# default to one second. This is a non-blocking timeout which holds   #
# the user in a 'connecting' state until the lookup is complete.      #
# The bind value indicates which IP to bind outbound requests to.     #
#                                                                     #
#<ident timeout="5">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Invite except module: Adds support for channel invite exceptions (+I)
#<module name="m_inviteexception.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Invite extban module: Implements extban i:, which requires an
# invitation to join a channel if it matches +b, or exempts a user from
# +i if it matches +e.
#<module name="m_inviteextban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Invisible module - Adds support for usermode +Q (quiet) which lets an
# oper go 'invisible' similar to unrealircd 3.1's +I mode. Note that
# opers are still able to see invisible users, and if an oper with +Q
# deopers, they will become visible. 
#
# This module is oper-only and seen by many to be quite abusive.  It
# currently requires an extra installation procedure, running the
# following from the command line in the InspIRCd directory and
# then recompiling:
# ./modulemanager install m_invisible
#
#<module name="m_invisible.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Join flood module: Adds support for join flood protection (+j)
#<module name="m_joinflood.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Jump Server module: Adds support for the RPL_REDIR numeric
# This module is oper-only.
# To use, JUMPSERVER must be in one of your oper class blocks.
# If your server is redirecting new clients and you get disconnected,
# do a REHASH from shell to open up again.
#<module name="m_jumpserver.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Anti-Auto-Rejoin: Adds support for prevention of auto-rejoin (+J)
# Setting this mode requires a parameter of the number of seconds
# before a kicked user is allowed to rejoin.  Note that removing and
# resetting the mode will reset the kick data.
#<module name="m_kicknorejoin.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Knock module: adds the /KNOCK command and +K channel mode which
# prevents /KNOCK from being used on the channel it is set on.
#<module name="m_knock.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# LDAP authentication module: Adds the ability to authenticate users  #
# via LDAP. This is an extra module which must be enabled explicitly  #
# by symlinking it from modules/extra, and requires the OpenLDAP libs #
# This modules is in extras. Re-run configure with: ./configure --enable-extras=m_ldapauth.cpp
# and run make install, then uncomment this module to enable it.      #
#                                                                     #
#<module name="m_ldapauth.so">                                        #
#                                                                     #
# Configuration:                                                      #
#                                                                     #
# <ldapauth baserdn="ou=People,dc=brainbox,dc=cc"                     #
#           attribute="uid"                                           #
#           server="ldap://brainwave.brainbox.cc"                     #
#           allowpattern="Guest*"                                     #
#           killreason="Access denied"                                #
#           searchscope="subtree"                                     #
#           binddn="cn=Manager,dc=brainbox,dc=cc"                     #
#           bindauth="mysecretpass"                                   #
#           setaccount="no"                                           #
#           verbose="yes">                                            #
#                                                                     #
# <ldapwhitelist cidr="10.42.0.0/16">                                 #
#                                                                     #
# The baserdn indicates the base DN to search in for users. Usually   #
# this is 'ou=People,dc=yourdomain,dc=yourtld'.                       #
#                                                                     #
# The attribute value indicates the attribute which is used to locate #
# a user account by name. On POSIX systems this is usually 'uid'.     #
#                                                                     #
# The server parameter indicates the LDAP server to connect to. The   #
# ldap:// style scheme before the hostname proper is MANDITORY.       #
#                                                                     #
# The allowpattern value allows you to specify a wildcard mask which  #
# will always be allowed to connect regardless of if they have an     #
# account, for example guest users.                                   #
#                                                                     #
# Killreason indicates the QUIT reason to give to users if they fail  #
# to authenticate.                                                    #
#                                                                     #
# The searchscope value indicates the subtree to search under. On our #
# test system this is 'subtree'. Your mileage may vary.               #
#                                                                     #
# Setting the verbose value causes an oper notice to be sent out for  #
# every failed authentication to the server, with an error string.    #
#                                                                     #
# The binddn and bindauth indicate the DN to bind to for searching,   #
# and the password for the distinguished name. Some LDAP servers will #
# allow anonymous searching in which case these two values do not     #
# need defining, otherwise they should be set similar to the examples #
# above.                                                              #
#                                                                     #
# If setaccount is yes, the account name in m_services_account is set #
# to the LDAP username that was authenticated                         #
#                                                                     #
# ldapwhitelist indicates that clients connecting from an IP in the   #
# provided CIDR do not need to authenticate against LDAP. It can be   #
# repeated to whitelist multiple CIDRs.                               #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# LDAP oper configuration module: Adds the ability to authenticate    #
# opers via LDAP. This is an extra module which must be enabled       #
# explicitly by symlinking it from modules/extra, and requires the    #
# OpenLDAP libs. Re-run configure with: ./configure --enable-extras=m_ldapoper.cpp
# and run make install, then uncomment this module to enable it.      #
#                                                                     #
#<module name="m_ldapoper.so">
#                                                                     #
# Configuration:                                                      #
#                                                                     #
# <ldapoper baserdn="ou=People,dc=brainbox,dc=cc"
#           server="ldap://brainwave.brainbox.cc"
#           searchscope="subtree"
#           binddn="cn=Manager,dc=brainbox,dc=cc"
#           bindauth="mysecretpass">
#                                                                     #
# Available configuration items are identical to the same items in    #
# m_ldapauth above.                                                   #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Lock server module: Adds /LOCKSERV and /UNLOCKSERV commands that is #
# used to temporarily close/open for new connections to the server.   #
# These commands require OPER status and that the LOCKSERV UNLOCKSERV #
# are specified in a <class> tag that the oper is part of. This is so #
# you can control who has access to this possible dangerous command.  #
# If your server is locked and you get disconnected, do a REHASH from #
# shell to open up again.
#
# This module is oper-only.
#
#<module name="m_lockserv.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Map hiding module: replaces /MAP and /LINKS output to users with a  #
# message to see a website, set by maphide="http://link.to/site" in   #
# the security tag, instead.                                          #
#<module name="m_maphide.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Msg flood module: Adds message/notice flood protection (+f)
#<module name="m_messageflood.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# MySQL module: Allows other SQL modules to access MySQL databases
# through a unified API. 
# This modules is in extras. Run ./configure --enable-extras=m_mysql.cpp
# to enable it, then rerun make install.
#
#<module name="m_mysql.so">
#
#-#-#-#-#-#-#-#-#-#-#-#- SQL CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# m_mysql.so is more complex than described here, see the wiki for    #
# more: http://wiki.inspircd.org/Modules/mysql                        #
#
#<database module="mysql" name="mydb" user="myuser" pass="mypass" host="localhost" id="my_database2">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Named Modes module: This module allows for the display and set/unset
# of channel settings and modes via long-form mode names in channels
# with the /PROP command.  For example, to set a ban with named modes:
# /prop #channel +ban foo!bar@baz . Currently this doesn't serve much
# purpose outside of making channel administration a bit easier in some
# cases, but eventually modules will start using named modes only because
# we're running out of channelmodes. :D
#<module name="m_namedmodes.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# NAMESX module: Provides support for the NAMESX extension which allows
# clients that support it to see all the prefixes set on a user without
# getting confused. This is supported by mIRC, x-chat, klient, and
# maybe more.
#<module name="m_namesx.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# National characters module:
# 1) Allows using national characters in nicknames.
# 2) Allows using custom (national) casemapping over the network.
# file -- filename of existing file in "locales" directory
# casemapping -- custom value for 005 numeric (if you want it to be
# different from the filename.
#
#<nationalchars file="bynets/russian-w1251-charlink" casemapping="ru_RU.cp1251-charlink">
#<module name="m_nationalchars.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Nickchange flood protection module: Allows up to X nick changes in Y seconds.
# Provides channel mode +F.
#<module name="m_nickflood.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Nicklock module: Let opers change a user's nick and then stop that
# user from changing their nick again, except to change it to their UID
# via "/NICK 0".
# This module is oper-only.
# To use, NICKLOCK and NICKUNLOCK must be in one of your oper class blocks.
#<module name="m_nicklock.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# No ctcp module: Adds the channel mode +C to block CTCPs and extban C
# to block CTCPs sent by specific users.
#<module name="m_noctcp.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# No kicks module: Adds the +Q channel mode and the Q: extban to deny
# certain users from kicking.
#<module name="m_nokicks.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# No nicks module: Adds the +N channel mode, as well as the +b N:
# extended bantype. +N stops all users from changing their nick,
# the +b N: extban stops anyone from matching a +b N:nick!user@host
# mask from changing their nick.
#<module name="m_nonicks.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# No part message module: adds extban 'p' to block part messages from #
# matching users.                                                     #
#<module name="m_nopartmsg.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# No Notice module: adds the channel mode +T and the extban T to block
# specific users from noticing the channel.
#<module name="m_nonotice.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Network buisness join module
# Allows an oper to join a channel using /OJOIN, giving them +Y on the
# channel which makes them immune to kick/deop/etc.
#<module name="m_ojoin.so">
#
#<ojoin prefix="!" notice="yes" op="yes">
# Specify the prefix that +Y will grant here
# Leave prefix empty if you do not wish +Y to grant a prefix
# If notice is set to on, upon ojoin, the server will notice
# the channel saying that the oper is joining on network business
# If op is set to on, it will give them +o along with +Y


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Oper channels mode: Adds the +O channel mode and +beI type O:<mask>
# to ban, exempt, and invex given oper type masks.
# e.g, /mode #channel +iI O:* is equivilant to chmode +O, but you
# may also, e.g. /mode #channel +iI O:AdminTypeOnly to only allow admins.
# +be work in a similar fashion.
#
#<module name="m_operchans.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Oper Join module: Auto-joins opers to a channel upon oper-up
# This module is oper-only. For the user equivalent, see m_conn_join.
#<module name="m_operjoin.so">
#
#-#-#-#-#-#-#-#-#-#-#   OPERJOIN CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# If you are using the m_operjoin.so module, specify options here:    #
#                                                                     #
# channel     -      The channel name to join, can also be a comma    #
#                    seperated list eg. "#channel1,#channel2".        #
#                                                                     #
# override    -      Lets the oper join walking thru any modes that   #
#                    might be set, even bans. Use "yes" or "no".      #
#                                                                     #
#<operjoin channel="#channel" override="no">
#
# Alternatively you can use the autojoin="channellist" in a <type>    #
# tag to set specific autojoins for a type of oper, for example:      #
#
#<type name="Helper" autojoin="#help" classes="...">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Oper log module: Logs all oper commands to the ircd log at default
# loglevel.
# This module is oper-only.
#<module name="m_operlog.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Oper prefixing module: Gives IRC operators a prefix status character
# on all channels they are in.
#
#<module name="m_operprefix.so">
#
# prefix     The prefix used for nicks with this mode. Not required.
# rank       A numeric rank for this prefix, defining what permissions it gives
#            VOICE_VALUE is 10000, HALFOP_VALUE is 20000, OP_VALUE is 30000
#            If not specified, 1000000 is used.
#<operprefix prefix="!" rank="1000000">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Oper MOTD module: Provides support for seperate message of the day
# on oper-up
# This module is oper-only.
#<module name="m_opermotd.so">
#
#-#-#-#-#-#-#-#-#-#-#   OPERMOTD CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# If you are using the m_opermotd.so module, specify the motd here    #
#                                                                     #
# onoper      -      Should the message be sent on /OPER or only when #
#                    /OPERMOTD is used. Use "yes" or "no".            #
#                                                                     #
#<opermotd file="oper.motd" onoper="yes">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Opmoderated module: Adds channel mode +U which makes messages from
# users below voice go to operators and above only.
#<module name="m_opmoderated.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Override module: Adds support for oper override
# This module is oper-only.
#<module name="m_override.so">
#
#-#-#-#-#-#-#-#-#-#-#   OVERRIDE CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# m_override.so is too complex to describe here. See the wiki:        #
# https://github.com/inspircd/wiki/wiki/Override-Module               #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Oper levels module: Gives each oper a level and prevents
# actions being taken against higher level opers
# Specify the level as the 'level' parameter of the <type> tag
# # This module is oper-only.
#<module name="m_operlevels.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Oper modes module: Allows you to specify modes to add/remove on oper
# Specify the modes as the 'modes' parameter of the <type> tag
# and/or as the 'modes' parameter of the <oper> tag.
# This module is oper-only. For the user equivalent, see m_conn_umodes
#<module name="m_opermodes.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Op flags module: allows you to adjust the rights of users in a channel
# in a more fine-grained manner than +qaohv modes.
# See http://wiki.inspircd.org/ChannelPermissions for details.
#<module name="m_opflags.so">
#<opflags level="30000" maxflags="15">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Password forwarding module: Forwards a password users can send on connect
# to the specified client below. The client is usually nickserv and this
# module is usually used to authenticate users with nickserv using their
# connect password.
#<module name="m_passforward.so">

#<passforward
		# nick: nick to forward connect passwords to.
		#nick="NickServ"

		# forwardmsg: Message to send to users using a connect password.
		# $nick will be the users' nick, $nickrequired will be the nick
		# of where the password is going (the nick above).
		#forwardmsg="NOTICE $nick :*** Forwarding PASS to $nickrequired"

		# cmd: Command for the nick to run when it recieves a connect
		# password. 
		#cmd="PRIVMSG $nickrequired :IDENTIFY $pass">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Password hash module: Allows hashed passwords to be used.
# To be useful, a hashing module like m_sha256.so also needs to be loaded.
# 
#<module name="m_password_hash.so">
#
#-#-#-#-#-#-#-#-#-# PASSWORD HASH CONFIGURATION #-#-#-#-#-#-#-#-#-#-#-#
#
# To use this module, you must define a hash type for each oper's
# password you want to hash. For example:
#
#     <oper name="Brain"
#           host="ident@dialup15.isp.com"
#           hash="sha256"
#           password="01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
#           type="NetAdmin">
# 
# Starting from 2.0, you can use a more secure salted hash that prevents simply
# looking up the hash's value in a rainbow table built for the hash.
#    hash="hmac-sha256" password="lkS1Nbtp$CyLd/WPQXizsbxFUTqFRoMvaC+zhOULEeZaQkUJj+Gg"
#
# Generate hashes using the /MKPASSWD command on the server. Don't run it on a
# server you don't trust with your password.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Permanent Channels module: Channels with the permanent channels mode
# will remain open even after everyone else has left the channel, and
# therefore keep things like modes, ban lists and topic. Permanent
# channels -may- need support from your Services package to function
# properly with them. This adds channel mode +P.
# This module is oper-only.
#<module name="m_permchannels.so">
#
# You may also create channels on startup by using the <permchannels> block.
# Don't forget to set them +P in the modes, or they won't stay permanent.
#<permchannels channel="#opers" modes="isP" topic="Opers only.">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# PostgreSQL module: Allows other SQL modules to access PgSQL databases
# through a unified API.
# This modules is in extras. Run ./configure --enable-extras=m_pgsql.cpp
# to enable it, then rerun make install.
#
#<module name="m_pgsql.so">
#
#-#-#-#-#-#-#-#-#-#-#-#- SQL CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# m_pgsql.so is more complex than described here, see the wiki for    #
# more: http://wiki.inspircd.org/Modules/pgsql                        #
#
#<database module="pgsql" name="mydb" user="myuser" pass="mypass" host="localhost" id="my_database" ssl="no">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Muteban: Implements extended ban m:, which stops anyone matching
# a mask like +b m:nick!user@host from speaking on channel.
#<module name="m_muteban.so">
#

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Random Quote module: provides a random quote on connect.
# NOTE: Some of these may mimic fatal errors and confuse users and 
# opers alike! - BEWARE!
#<module name="m_randquote.so">
#
#-#-#-#-#-#-#-#-#-#-  RANDOMQUOTES CONFIGURATION -#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# Optional - If you specify to use the m_randquote.so module, then    #
# specify below the path to the randquotes.conf file.                 #
#                                                                     #
#<randquote file="randquotes.conf">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Redirect module: Adds channel redirection (mode +L)
#<module name="m_redirect.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Regular Expression Provider for Glob or wildcard (?/*) matching.
# You must have at least 1 provider loaded to use m_filter or m_rline
# modules. This module has no additional requirements, as it uses the
# matching already present in InspIRCd core.
#<module name="m_regex_glob.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Regular Expression Provider for PCRE (Perl-Compatible Regular
# Expressions). You need libpcre installed to compile and load this
# module. You must have at least 1 provider loaded to use m_filter or
# m_rline.
#<module name="m_regex_pcre.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Regular Expression Provider for POSIX Regular Expressions.
# You shouldn't need any additional libraries on a POSIX-compatible
# system (ie: any Linux, BSD, but not Windows). You must have at least
# 1 provider loaded to use m_filter or m_rline.
# On POSIX-compliant systems, regex syntax can be found by using the
# command: 'man 7 regex'.
#<module name="m_regex_posix.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Regular Expression Provider for TRE Regular Expressions.
# This is the same regular expression engine used by UnrealIRCd, so
# if you are most familiar with the syntax of /spamfilter from there,
# this is the provider you want. You need libtre installed in order
# to compile and load this module.
#<module name="m_regex_tre.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Registered users only channel creation
# Allows only registered users and opers to create new channels.
#
# You probably *DO NOT* want to load this module on a public network.
#
#<module name="m_regonlycreate.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Remove module: Adds the /REMOVE command which is a peaceful
# alternative to /KICK
#<module name="m_remove.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Restricted channels module: Allows only opers to create channels.
#
# You probably *DO NOT* want to load this module on a public network.
#
#<module name="m_restrictchans.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Restrict message module: Allows users to only message opers.
#
# You probably *DO NOT* want to load this module on a public network.
#
#<module name="m_restrictmsg.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Ban users through regular expression patterns
#<module name="m_rline.so">
#
#-#-#-#-#-#-#-#-#-#-#-#- RLINE CONFIGURATION -#-#-#-#-#-#-#-#-#-#-#-#-#
#
# If you wish to re-check a user when they change nickname (can be
# useful under some situations, but *can* also use CPU with more users
# on a server) then set the following configuration value:
# Also, this is where you set what Regular Expression engine is to be
# used. If you ever change it while running, all of your R-Lines will be
# wiped. This is the regex engine used by all R-Lines set, and
# m_regex_<engine>.so must be loaded, or rline will be nonfunctional
# until you load it or change the engine to one that is loaded.
#
#<rline matchonnickchange="yes" engine="pcre">
#
# Generally, you will NOT want to use 'glob' here, as this turns
# rline into just another gline. The exceptions are that rline will
# always use the full nick!user@host realname string, rather than only
# user@host, but beware that only the ? and * wildcards are available,
# and are the only way to specify where the space can occur if you do
# use glob. For this reason, is recommended to use a real regex engine
# so that at least \s or [[:space:]] is available.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# RMATCH module: Match users matching a regular expression
#<module name="m_rmatch.so">
#<rmatch engine="glob">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SAJOIN module: Adds the /SAJOIN command
# This module is oper-only.
# To use, SAJOIN must be in one of your oper class blocks.
#<module name="m_sajoin.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SAKICK module: Adds the /SAKICK command
# This module is oper-only.
# To use, SAKICK must be in one of your oper class blocks.
#<module name="m_sakick.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SAMODE module: Adds the oper /SAMODE command
# This module is oper-only.
# To use, SAMODE must be in one of your oper class blocks.
#<module name="m_samode.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SANICK module: Allows opers to change user's nicks
# This module is oper-only.
# To use, SANICK must be in one of your oper class blocks.
#<module name="m_sanick.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SAPART module: Adds the oper /SAPART command
# This module is oper-only.
# To use, SAPART must be in one of your oper class blocks.
#<module name="m_sapart.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SAQUIT module: Adds the oper /SAQUIT command (abusable!!!)
# This module is oper-only.
# To use, SAQUIT must be in one of your oper class blocks.
#<module name="m_saquit.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SATOPIC module: Adds the oper /SATOPIC command
# This module is oper-only.
# To use, SATOPIC must be in one of your oper class blocks.
#<module name="m_satopic.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SASL authentication module: Provides support for IRC Authentication 
# Layer (aka: atheme SASL) via AUTHENTICATE.
#<module name="m_sasl.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Secure list module: Prevent /LIST in the first minute of connection,
# crippling most spambots and trojan spreader bots.
#<module name="m_securelist.so">
#
#-#-#-#-#-#-#-#-#-# SECURELIST CONFIGURATION -#-#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# Securelist can be harmful to some irc search engines such as        #
# netsplit.de and searchirc.com. To prevent securelist blocking these #
# sites from listing, define exception tags as shown below:           #
#<securehost exception="*@*.searchirc.org">
#<securehost exception="*@*.netsplit.de">
#<securehost exception="*@echo940.server4you.de">
#<securehost exception="*@*.ircdriven.com">
#                                                                     #
# Define the following variable to change how long a user must wait   #
# before issuing a LIST. If not defined, defaults to 60 seconds.      #
#                                                                     #
#<securelist waittime="60">                                           #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Servprotect module: Provides support for Austhex style +k /
# UnrealIRCD +S services mode
#<module name="m_servprotect.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# See nicks module: Allow for SNOMASK +N which shows nick changes.
# This module is oper-only.
#<module name="m_seenicks.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Set Idle module: Adds a command for opers to change their
# idle time (mainly a toy)
# This module is oper-only.
# To use, SETIDLE must be in one of your oper class blocks.
#<module name="m_setidle.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Sethost module: Adds the /SETHOST command
# This module is oper-only.
# To use, SETHOST must be in one of your oper class blocks.
# See m_chghost for how to customise valid chars for hostnames
#<module name="m_sethost.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Setident module: Adds the /SETIDENT command
# This module is oper-only.
# To use, SETIDENT must be in one of your oper class blocks.
#<module name="m_setident.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SETNAME module: Adds the /SETNAME command
# This module is oper-only.
# To use, SETNAME must be in one of your oper class blocks.
#<module name="m_setname.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Serverban: Implements extended ban s:, which stops anyone connected
# to a server matching a mask like +b s:server.mask.here from joining.
#<module name="m_serverban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Serverbots: Implements simple command-forwarding bots as part of
# the IRCd. This can be used similar to aliases, but allows users to
# speak to a client instead of using /COMMANDs
#<module name="m_serverbots.so">
#
# An implementation of the "IRC" nick from Unreal and other IRCds
#<bot nick="irc">
#<botcmd bot="irc" replace="$0-">
# A "help" bot that forwards messages to ops in #help
#<bot nick="help">
#<botcmd bot="help" replace="JOIN #help&nl;PRIVMSG @#help :$0-">
# See services/builtin.conf.example for more examples

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Shorthand listmodes: Allows shorthand listmodes
# (+v user1,user2,user3 instead of +vvv user1 user2 user3)
#<module name="m_shorthand_listmodes.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Show Whois module: Adds the +W usermode which allows opers
# to see when they are whois'ed (can be annoying).
# This module is oper-only.
#<module name="m_showwhois.so">
#
# If you wish, you may also let users set this mode. Only opers with the
# users/auspex priv will see real hosts of people, though. This setting
# is not reloadable via /rehash, and will require /reloadmodule, as
# it directly affects the mode object itself.
#<showwhois opersonly="yes"
#
# You may also set whether or not users should recieve whois notices, should
# they be /whois'd by an oper.
# showfromopers="yes">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Shun module: Provides the /shun command, which stops a user executing 
# most commands.
# This module is oper-only.
# To use, SHUN must be in one of your oper class blocks.
#<module name="m_shun.so">
#
# You may also configure which commands you wish a user to be able to
# perform. It should be noted that if a shunned user issues QUIT or PART
# then their message will be removed, as if they did not issue one.
#
# You can (optionally) let the user know that their command was blocked.
#
# You may also let SHUN affect opers (defaults to no).
#<shun enabledcommands="PING PONG QUIT PART JOIN" notifyuser="yes" affectopers="no">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SSL channel mode module: Adds support for SSL-only channels (+z).
# does not do anything useful without a working SSL module (see below)
#<module name="m_sslmodes.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# GnuTLS ssl module: Adds support for client-server SSL using GnuTLS,
# if enabled. You must copy the source for this module from the directory
# src/modules/extra, or answer 'yes' in ./configure when asked if you
# want to enable this, or it will not load.
#<module name="m_ssl_gnutls.so">
#
#-#-#-#-#-#-#-#-#-#-#-  GNUTLS CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# m_ssl_gnutls.so is too complex it describe here, see the wiki:      #
# http://wiki.inspircd.org/Modules/ssl_gnutls                         #
#                                                                     #
# NOTE: If you want to use this module to encrypt and sign your       #
# server to server traffic, you MUST load it before m_spanningtree in #
# your configuration file!                                            #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SSL Info module: Allows users to retrieve information about other
# user's peer SSL certificates and keys. This can be used by client
# scripts to validate users. For this to work, one of m_ssl_gnutls.so
# or m_ssl_openssl.so must be loaded. This module also adds the 
# "* <user> is using a secure connection" whois line, the ability for
# opers to use SSL fingerprints to verify their identity and the ability
# to force opers to use SSL connections in order to oper up.
# It is highly recommended to load this module especially if
# you use SSL on your network.
# For how to use the oper features, please see the first example <oper> tag
# in opers.conf.example.
#
#<module name="m_sslinfo.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# OpenSSL ssl module: Adds support for client-server SSL using OpenSSL,
# if enabled. You must copy the source for this module from the directory
# src/modules/extra, or answer 'yes' in ./configure when asked if you
# want to enable this, or it will not load.
#<module name="m_ssl_openssl.so">
#
#-#-#-#-#-#-#-#-#-#-#- OPENSSL CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# m_ssl_openssl.so is too complex it describe here, see the wiki:     #
# http://wiki.inspircd.org/Modules/ssl_openssl                        #
#                                                                     #
# NOTE: If you want to use this module to encrypt and sign your       #
# server to server traffic, you MUST load it before m_spanningtree in #
# your configuration file!                                            #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Strip color module: Adds the channel mode +S and extban S
#<module name="m_stripcolor.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SILENCE module: Adds support for /SILENCE
#<module name="m_silence.so">
#
# Configuration tags:
#
#<silence maxentries="32">
#
# Sets the maximum number of entries on a users silence list.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SQLite3 module: Allows other SQL modules to access SQLite3          #
# databases through a unified API.
# This modules is in extras. Run ./configure --enable-extras=m_sqlite3.cpp
# to enable it, then rerun make install.
#
#<module name="m_sqlite3.so">
#
#-#-#-#-#-#-#-#-#-#-#-#- SQL CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# m_sqlite.so is more complex than described here, see the wiki for   #
# more: http://wiki.inspircd.org/Modules/sqlite3                      #
#
#<database module="sqlite" hostname="/full/path/to/database.db" id="anytext">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SQL authentication module: Allows IRCd connections to be tied into
# a database table (for example a forum). This can also sign users into
# an account automatically if m_account is loaded.
#
#<module name="m_sql_auth.so">
#
#-#-#-#-#-#-#-#-#-#-#- SQLAUTH CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#
#  
# dbid         Database ID from the <database> tag (see database module)
# verbose      Set to true to notify opers of failed connections
# query        Query string. Variable substitution is allowed; see below
# 
#<sqlauth dbid="authdb" verbose="no"
#	query="SELECT id FROM users WHERE user='$nick' AND pass='$sha256pass'">
#
# This module does not actually prevent users from connecting. Instead, use
# <connect requiresqlauth="true"> in a connect block to require that the
# user's query has completed successfully. This allows you to only require
# SQL authentication for certain types of users, or to allow bypassing it
# with a hard-coded <connect> block for use should the SQL server go down.
#
# A user is considered to have "passed" SQL auth if the query returns at
# least one row. The values returned in first row may produce additional
# actions; the following column names are defined:
#  class       Named <connect> class to put the user in.
#  account     Account to log the user in to. Requires m_services_account
#  tag         Tag associated with the account name. You probably don't need this.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SQL Variable substitution
# All SQL queries that allow variable substitution will populate the
# following fields:
#  nick      nickname
#  host      hostname (resolved, real host not cloak/vhost)
#  ip        IP address
#  gecos     Realname
#  ident     Ident, likely taken from USER command
#  server    Server name that the user is on
#  uuid      UID for the user
#
# Additionally, sqlauth adds the following:
#  pass       Password used for the server (PASS command)
#  md5pass    MD5 hash of $pass, hex format. Requires m_md5
#  sha256pass SHA256 hash of $pass, hex format. Requires m_sha256

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SQL command module: Allows arbitrary SQL queries to be run based
# on a /COMMAND and its parameters
#
#<module name="m_sql_command.so">
#  dbid        - Database ID to use
#  name        - Name of the command
#  syntax      - Syntax hints (optional)
#  operonly    - Must be an allowed command in oper tag, true by default
#  queryformat - Query string format; $1, $2, ... are command parameters
#  rowformat   - String sent to the user for each row of the result
#                Each column returned is a $variable
#  resultformat- String sent to the user on a successful query
#                $rows is the number of rows returned/modified
#  errorformat - String sent to the user on an unsuccessful query
#                $msg is a detailed error message.
#
#Examples related to m_sql_oper:
#<sqlcommand name="ADDOPER" syntax="<type> <name> <pwhash>" dbid="operdb"
#	queryformat="INSERT INTO ircd_opers VALUES('$1', '$2', '$3', '*@*')"
#	resultformat=":$server NOTICE $nick :Success, $rows oper added">
#<sqlcommand name="LISTOPERS" syntax="<type>" dbid="operdb"
#	queryformat="SELECT username, hostname FROM ircd_opers WHERE type = '$1'"
#	rowformat=":$server NOTICE $nick :Oper $username has hosts $hostname">
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SQL oper module: Allows you to store oper credentials in an SQL table
# You must copy the source for this module from the directory src/modules/extra
#
#<module name="m_sql_oper.so">
#
#-#-#-#-#-#-#-#-#-#-#- SQLOPER CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# dbid       - Database ID to use (see m_sql)                         #
# hash       - Hashing provider to use for password hashing           #
# query      - Query string format. Default is:
#  SELECT hostname as host, type FROM ircd_opers WHERE username='$username' AND password='$password'
#                                                                     #
# See also: http://wiki.inspircd.org/Modules/sqloper                  #
#                                                                     #
#<sqloper dbid="1" hash="md5">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SVSHold module: Implements SVSHOLD. Like Q:Lines, but can only be   #
# added/removed by Services.                                          #
#<module name="m_svshold.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# SWHOIS module: Allows you to add arbitary lines to user WHOIS.
# This module is oper-only.
# To use, SWHOIS must be in one of your oper class blocks.
#<module name="m_swhois.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Test module: enable this to create a command useful in testing
# flood control. To avoid accidental use on live networks, the server
# name must contain ".test" to load the module
#<module name="m_testnet.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Timed modes module: Adds timed channel modes and the /TMODE command
#<module name="m_timedmodes.so">
#-#-#-#-#-#-#-#-#-#-# TIMED MODES CONFIGURATION #-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# Use these tags to customise the timed mode limits on a per channel  #
# basis. The tags are read from top to bottom, and any tag found      #
# which matches the channel's name applies the timed mode limit to    #
# that channel. It is advisable to put an entry with the channel as   #
# '*' at the bottom of the list. If none are specified or no tag is   #
# matched, the timed mode list maximum size defaults to 30 entries.   #
#                                                                     #
#<timedmodes chan="#morons" limit="64">
#<timedmodes chan="*" limit="30">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Test line module: Adds the /TLINE command, used to test how many
# users a /GLINE or /ZLINE etc would match.
# This module is oper-only.
# To use, TLINE must be in one of your oper class blocks.
#<module name="m_tline.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# UHNAMES support module: Adds support for the IRCX style UHNAMES
# extension, which displays ident and hostname in the names list for
# each user, saving clients from doing a WHO on the channel. Note that
# this module is not widely supported yet. If a client does not support
# UHNAMES it will not enable it, this will not break incompatible
# clients.
#<module name="m_uhnames.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Uninvite module: Adds the /UNINVITE command which lets users remove
# pending invites from channels without waiting for the user to join.
#<module name="m_uninvite.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Userip module: Adds the /USERIP command
# This module is oper-only.
# To use, USERIP must be in one of your oper class blocks.
#<module name="m_userip.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Vhost module: Adds the VHOST command which allows for adding virtual
# hosts which are accessible using a username and password in the config.
#<module name="m_vhost.so">
#
#-#-#-#-#-#-#-#-#-#-#- VHOST CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#-#
#                                                                     #
# user       - Username for the vhost.                                #
#                                                                     #
# pass       - Password for the vhost.                                #
#								      #
# hash       - The hash for the specific user (optional)
#              m_password_hash.so and a hashing module must be loaded for this to work
#                                                                     #
# host       - Vhost to set.                                          #
#
#<vhost user="some_username" pass="some_password" host="some.host">
#<vhost user="foo" password="fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9" hash="sha256" host="some.other.host">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Watch module: Adds the WATCH command, which is used by clients to 
# maintain notify lists.
#<module name="m_watch.so">
#
# Configuration tags:
#
#<watch maxentries="32">
#
# Sets the maximum number of entries on a user's watch list.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# XLine database: Stores all *Lines (G/Z/K/R/any added by other modules)
# in a file "xline.db" which can be re-loaded on restart. This is useful
# for two reasons: it keeps bans so users may not evade them, and on
# bigger networks, server connections will take less time as there will
# be a lot less bans to apply - as most of them will already be there.
#<module name="m_xline_db.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#    ____                _   _____ _     _       ____  _ _   _        #
#   |  _ \ ___  __ _  __| | |_   _| |__ (_)___  | __ )(_) |_| |       #
#   | |_) / _ \/ _` |/ _` |   | | | '_ \| / __| |  _ \| | __| |       #
#   |  _ <  __/ (_| | (_| |   | | | | | | \__ \ | |_) | | |_|_|       #
#   |_| \_\___|\__,_|\__,_|   |_| |_| |_|_|___/ |____/|_|\__(_)       #
#                                                                     #
# To link servers to InspIRCd, you MUST load the m_spanningtree       #
# module. If you don't do this, server links will NOT work at all.    #
# This is by design, to allow for the implementation of other linking #
# protocols in modules in the future.                                 #
#                                                                     #

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Spanning Tree module - allows linking of servers using the spanning
# tree protocol (see the READ THIS BIT section above).
# You will almost always want to load this.
#
#<module name="m_spanningtree.so">

<spanningtree
	# hideulines: If this value is set to yes, U-lined servers will
	# be hidden from non-opers in /links and /map.
	hideulines="no"

	# flatlinks: If this value is set to yes, /map and /links will
	# be flattened when shown to non-opers.
	flatlinks="no"

	# allowmismatched: Setting this option to yes will allow servers to link even
	# if they don't have the same VF_OPTCOMMON modules loaded. Setting this to
	# yes may introduce some desyncs and weirdness.
	allowmismatched="no"

	# quietbursts: When syncing or splitting from a network, a server
	# can generate a lot of connect and quit messages to opers with
	# +C and +Q snomasks. Setting this to yes squelches those messages,
	# which makes it easier for opers, but degrades the functionality of
	# bots like BOPM during netsplits.
	quietbursts="yes"

	# pingwarning: If a server does not respond to a ping within x seconds,
	# it will send a notice to opers with snomask +l informing that the server
	# is about to ping timeout.
	pingwarning="15"

	# serverpingfreq: How often pings are sent between servers (in seconds).
	serverpingfreq="60">

